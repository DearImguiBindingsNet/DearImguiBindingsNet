namespace DearImguiGenerator;

public class CSharpCodeWriter
{
    private int _currentIndentLevel;

    private string _currentIndent = "";

    private readonly string _genNamespace;
    private readonly string _constantsClass;
    private readonly string _functionsClass;
    private readonly string _outDir;
    
    public string? UsingStatic { get; set; }
    public List<string> Usings { get; set; } = [];

    private StreamWriter _writer = null!;

    public CSharpCodeWriter(string genNamespace, string constantsClass, string functionsClass, string outDir)
    {
        _genNamespace = genNamespace;
        _constantsClass = constantsClass;
        _functionsClass = functionsClass;
        _outDir = outDir;
        var dirInfo = new DirectoryInfo(_outDir);
        if (!dirInfo.Exists)
        {
            dirInfo.Create();
        }
    }

    public void WriteLine(string line)
    {
        if (line.Length == 0)
        {
            _writer.WriteLine();
        }
        else
        {
            _writer.WriteLine(_currentIndent + line);
        }
    }

    public void WriteLines(IEnumerable<string> lines)
    {
        foreach (var line in lines)
        {
            WriteLine(line);
        }
    }

    public void PushBlock()
    {
        WriteLine("{");
        _currentIndentLevel++;
        _currentIndent = new string('\t', _currentIndentLevel);
    }

    public void PopBlock()
    {
        _currentIndentLevel--;
        _currentIndent = new string('\t', _currentIndentLevel);
        WriteLine("}");
    }

    public void Flush()
    {
        _writer.Flush();
    }

    public void WriteConsts(IEnumerable<CSharpConstant> constants)
    {
        _writer = new StreamWriter(Path.Combine(_outDir, "ImGui.Constants.cs"));

        WriteLine("// <auto-generated/>");
        WriteLine($"namespace {_genNamespace};");
        WriteLine("");

        WriteLine($"public static partial class {_constantsClass}");

        PushBlock();

        foreach (var sharpConstant in constants)
        {
            WriteSummaries(sharpConstant);
            WriteReturnComments(sharpConstant);

            WriteLine($"public const {sharpConstant.Type.ToCSharpCode()} {sharpConstant.Name} = {sharpConstant.Value};");
            WriteLine("");
        }

        PopBlock();
    }

    private IEnumerable<string> GenSummary(string comment)
    {
        yield return "<summary>";
        yield return new System.Xml.Linq.XText(comment).ToString();
        yield return "</summary>";
    }

    private IEnumerable<string> GenSummary(IEnumerable<string> comments)
    {
        yield return "<summary>";
        foreach (var comment in comments)
        {
            yield return $"<para>{new System.Xml.Linq.XText(comment)}</para>";
        }

        yield return "</summary>";
    }

    private IEnumerable<string> GenParamComments(IEnumerable<(string, string)> comments)
    {
        return comments.Select(comment => $"<param name=\"{comment.Item1}\">{new System.Xml.Linq.XText(comment.Item2)}</param>");
    }

    public void WriteSummaries(CSharpDefinition definition)
    {
        bool hasPreceding = definition.PrecedingComment is not null;
        if (hasPreceding)
        {
            WriteLines(
                GenSummary(definition.PrecedingComment!)
                    .Select(x => $"/// {x}")
            );
        }

        if (definition.TrailingComment is not null)
        {
            WriteLines(
                GenSummary(definition.TrailingComment)
                    .Select((x, i) => $"/// {(hasPreceding && i == 0 ? "<para/>" : "")}{x}")
            );
        }
    }

    public void WriteParamComments(CSharpFunction definition)
    {
        if (definition.ParamComments.Count > 0)
        {
            WriteLines(
                GenParamComments(definition.ParamComments).Select(x => $"/// {x}")
            );
        }
    }

    public void WriteParamComments(CSharpDelegate definition)
    {
        if (definition.ParamComments.Count > 0)
        {
            WriteLines(
                GenParamComments(definition.ParamComments).Select(x => $"/// {x}")
            );
        }
    }

    public void WriteReturnComments(CSharpDefinition definition)
    {
        if (definition.ReturnComment is not null)
        {
            WriteLine(
                $"/// <returns>{new System.Xml.Linq.XText(definition.ReturnComment)}</returns>"
            );
        }
    }
    
    private string JoinModifiers(CSharpDefinition def)
    {
        if (def.Modifiers.Count == 0)
        {
            return "";
        }
        else
        {
            return string.Join(" ", def.Modifiers) + " ";
        }
    }

    private string JoinArguments(CSharpDelegate def)
    {
        if (def.Arguments.Count == 0)
        {
            return "";
        }
        else
        {
            return string.Join(", ", def.Arguments.Select(x => $"{x.Type.ToCSharpCode()} {x.Name}"));
        }
    }

    private string JoinArguments(CSharpFunction def)
    {
        if (def.Arguments.Count == 0)
        {
            return "";
        }
        else
        {
            return string.Join(", ", def.Arguments.Select(x => $"{x.Type.ToCSharpCode()} {x.Name}"));
        }
    }

    public void WriteEnums(IEnumerable<CSharpEnum> enums)
    {
        _writer.Dispose();

        _writer = new StreamWriter(Path.Combine(_outDir, "ImGui.Enums.cs"));

        WriteLine("// <auto-generated/>");
        WriteLine($"namespace {_genNamespace};");
        WriteLine("");

        foreach (var e in enums)
        {
            WriteSummaries(e);

            WriteLine($"{JoinModifiers(e)}enum {e.Name.TrimEnd('_')}");
            PushBlock();

            foreach (var eValue in e.Values)
            {
                WriteSummaries(eValue);
                WriteReturnComments(eValue);

                WriteLine($"{JoinModifiers(eValue)}{eValue.Name} = {eValue.Value},");
                WriteLine("");
            }

            PopBlock();
        }
    }

    private string GenGetSet(CSharpProperty prop)
    {
        if (!prop.Get && !prop.Set)
        {
            throw new InvalidOperationException("Invalid property: not get and no set");
        }

        if (prop.Get)
        {
            if (prop.Set)
            {
                return "{ get; set; }";
            }
            else
            {
                return "{ get; }";
            }
        }

        throw new InvalidOperationException("Invalid property: no get");
    }
    
    public void WriteStructs(List<CSharpStruct> structs, List<string> usings)
    {
        _writer?.Dispose();

        _writer = new StreamWriter(Path.Combine(_outDir, "ImGui.Structs.cs"));

        WriteLine("// <auto-generated/>");
        
        WriteLines(usings);
        
        WriteLine($"namespace {_genNamespace};");
        if (UsingStatic is not null)
        {
            WriteLine(UsingStatic);
        }

        WriteLine("");

        foreach (var s in structs)
        {
            WriteSummaries(s);
            WriteReturnComments(s);

            WriteLine($"{JoinModifiers(s)}struct {s.Name}");
            PushBlock();
            
            foreach (var sProperty in s.Properties)
            {
                WriteSummaries(sProperty);
                WriteReturnComments(sProperty);
                
                WriteLine($"{JoinModifiers(sProperty)}{sProperty.Type.ToCSharpCode()} {sProperty.Name} {GenGetSet(sProperty)}");
                WriteLine("");
            }

            foreach (var sField in s.Fields)
            {
                WriteSummaries(sField);
                WriteReturnComments(sField);

                if (sField.IsArray)
                {
                    WriteLine($"{JoinModifiers(sField)}{sField.Type.ToCSharpCode()} {sField.Name}[{sField.ArrayBound}];");
                }
                else
                {
                    WriteLine($"{JoinModifiers(sField)}{sField.Type.ToCSharpCode()} {sField.Name};");
                }

                WriteLine("");
            }
            
            foreach (var sConstructor in s.Constructors)
            {
                WriteSummaries(sConstructor);
                WriteReturnComments(sConstructor);
                
                WriteLine($"{JoinModifiers(sConstructor)}{sConstructor.ContainerName}({JoinArguments(sConstructor)})");
                PushBlock();
                
                WriteLines(sConstructor.Body);
                
                PopBlock();
                
                WriteLine("");
            }

            PopBlock();
        }
    }

    public void WriteDelegates(List<CSharpDelegate> delegates)
    {
        _writer.Dispose();

        _writer = new StreamWriter(Path.Combine(_outDir, "ImGui.Delegates.cs"));

        WriteLine("// <auto-generated/>");
        WriteLine("using System.Runtime.InteropServices;");
        WriteLine("");
        WriteLine($"namespace {_genNamespace};");
        WriteLine("");

        foreach (var cSharpDelegate in delegates)
        {
            WriteSummaries(cSharpDelegate);
            WriteParamComments(cSharpDelegate);
            WriteReturnComments(cSharpDelegate);

            WriteLines(cSharpDelegate.Attributes.Select(x => $"[{x}]"));
            WriteLine($"{JoinModifiers(cSharpDelegate)}delegate {cSharpDelegate.ReturnType.ToCSharpCode()} {cSharpDelegate.Name}({JoinArguments(cSharpDelegate)});");

            WriteLine("");
        }
    }

    public void WriteInlineArrays(List<CSharpStruct> inlineArrays)
    {
        _writer.Dispose();

        _writer = new StreamWriter(Path.Combine(_outDir, "ImGui.InlineArrays.cs"));

        WriteLine("// <auto-generated/>");
        WriteLine("using System.Runtime.CompilerServices;");
        WriteLine("");

        WriteLine($"namespace {_genNamespace};");

        if (UsingStatic is not null)
        {
            WriteLine(UsingStatic);
        }

        WriteLine("");

        foreach (var arr in inlineArrays)
        {
            WriteSummaries(arr);
            WriteReturnComments(arr);

            WriteLines(arr.Attributes.Select(x => $"[{x}]"));
            WriteLine($"{JoinModifiers(arr)}struct {arr.Name}");
            PushBlock();

            foreach (var sField in arr.Fields)
            {
                WriteSummaries(sField);
                WriteReturnComments(sField);

                WriteLine($"{JoinModifiers(sField)}{sField.Type.ToCSharpCode()} {sField.Name};");

                WriteLine("");
            }

            PopBlock();
        }
    }

    public void WriteFunctions(List<CSharpFunction> functions)
    {
        _writer.Dispose();

        _writer = new StreamWriter(Path.Combine(_outDir, "ImGui.Functions.cs"));

        WriteLine("// <auto-generated/>");
        WriteLine("using System.Runtime.InteropServices;");
        WriteLine("");

        WriteLine($"namespace {_genNamespace};");
        if (UsingStatic is not null)
        {
            WriteLine(UsingStatic);
        }

        WriteLine("");

        WriteLine($"public static class {_functionsClass}");

        PushBlock();

        foreach (var func in functions)
        {
            WriteSummaries(func);
            WriteParamComments(func);
            WriteReturnComments(func);

            WriteLines(func.Attributes.Select(x => $"[{x}]"));
            WriteLine($"{JoinModifiers(func)}{func.ReturnType.ToCSharpCode()} {func.Name}({JoinArguments(func)});");
            WriteLine("");
        }

        PopBlock();
    }
}