// <auto-generated/>
namespace ImGuiNative;

public static partial class ImGuiConsts
{
	public const string IMGUI_DISABLE_OBSOLETE_FUNCTIONS = "";

	public const string IMGUI_DISABLE_OBSOLETE_KEYIO = "";

	public const string IMGUI_VERSION = "1.90.5 WIP";

	public const long IMGUI_VERSION_NUM = 19041;

	public const bool IMGUI_HAS_TABLE = true;

	/// <summary>
	/// float[3]: Standard type for colors, without alpha. User code may use this type.
	/// </summary>
	public const string IMGUI_PAYLOAD_TYPE_COLOR_3F = "_COL3F";

	/// <summary>
	/// float[4]: Standard type for colors. User code may use this type.
	/// </summary>
	public const string IMGUI_PAYLOAD_TYPE_COLOR_4F = "_COL4F";

	/// <summary>
	/// Invalid Unicode code point (standard value).
	/// </summary>
	public const long IM_UNICODE_CODEPOINT_INVALID = 0xFFFD;

	public const bool IMGUI_API = true;

	public const bool IMGUI_IMPL_API = IMGUI_API;

	/// <summary>
	/// Maximum Unicode code point supported by this build.
	/// </summary>
	public const long IM_UNICODE_CODEPOINT_MAX = 0xFFFF;

	public const long IM_DRAWLIST_TEX_LINES_WIDTH_MAX = 63;

	public const long IM_COL32_R_SHIFT = 0;

	public const long IM_COL32_G_SHIFT = 8;

	public const long IM_COL32_B_SHIFT = 16;

	public const long IM_COL32_A_SHIFT = 24;

	public const long IM_COL32_A_MASK = 0xFF000000;

	public const int ImGuiWindowFlags_None = 0;

	/// <summary>
	/// Disable title-bar
	/// </summary>
	public const int ImGuiWindowFlags_NoTitleBar = 1;

	/// <summary>
	/// Disable user resizing with the lower-right grip
	/// </summary>
	public const int ImGuiWindowFlags_NoResize = 2;

	/// <summary>
	/// Disable user moving the window
	/// </summary>
	public const int ImGuiWindowFlags_NoMove = 4;

	/// <summary>
	/// Disable scrollbars (window can still scroll with mouse or programmatically)
	/// </summary>
	public const int ImGuiWindowFlags_NoScrollbar = 8;

	/// <summary>
	/// Disable user vertically scrolling with mouse wheel. On child window, mouse wheel will be forwarded to the parent unless NoScrollbar is also set.
	/// </summary>
	public const int ImGuiWindowFlags_NoScrollWithMouse = 16;

	/// <summary>
	/// Disable user collapsing window by double-clicking on it. Also referred to as Window Menu Button (e.g. within a docking node).
	/// </summary>
	public const int ImGuiWindowFlags_NoCollapse = 32;

	/// <summary>
	/// Resize every window to its content every frame
	/// </summary>
	public const int ImGuiWindowFlags_AlwaysAutoResize = 64;

	/// <summary>
	/// Disable drawing background color (WindowBg, etc.) and outside border. Similar as using SetNextWindowBgAlpha(0.0f).
	/// </summary>
	public const int ImGuiWindowFlags_NoBackground = 128;

	/// <summary>
	/// Never load/save settings in .ini file
	/// </summary>
	public const int ImGuiWindowFlags_NoSavedSettings = 256;

	/// <summary>
	/// Disable catching mouse, hovering test with pass through.
	/// </summary>
	public const int ImGuiWindowFlags_NoMouseInputs = 512;

	/// <summary>
	/// Has a menu-bar
	/// </summary>
	public const int ImGuiWindowFlags_MenuBar = 1024;

	/// <summary>
	/// Allow horizontal scrollbar to appear (off by default). You may use SetNextWindowContentSize(ImVec2(width,0.0f)); prior to calling Begin() to specify width. Read code in imgui_demo in the "Horizontal Scrolling" section.
	/// </summary>
	public const int ImGuiWindowFlags_HorizontalScrollbar = 2048;

	/// <summary>
	/// Disable taking focus when transitioning from hidden to visible state
	/// </summary>
	public const int ImGuiWindowFlags_NoFocusOnAppearing = 4096;

	/// <summary>
	/// Disable bringing window to front when taking focus (e.g. clicking on it or programmatically giving it focus)
	/// </summary>
	public const int ImGuiWindowFlags_NoBringToFrontOnFocus = 8192;

	/// <summary>
	/// Always show vertical scrollbar (even if ContentSize.y &lt; Size.y)
	/// </summary>
	public const int ImGuiWindowFlags_AlwaysVerticalScrollbar = 16384;

	/// <summary>
	/// Always show horizontal scrollbar (even if ContentSize.x &lt; Size.x)
	/// </summary>
	public const int ImGuiWindowFlags_AlwaysHorizontalScrollbar = 32768;

	/// <summary>
	/// No gamepad/keyboard navigation within the window
	/// </summary>
	public const int ImGuiWindowFlags_NoNavInputs = 65536;

	/// <summary>
	/// No focusing toward this window with gamepad/keyboard navigation (e.g. skipped by CTRL+TAB)
	/// </summary>
	public const int ImGuiWindowFlags_NoNavFocus = 131072;

	/// <summary>
	/// Display a dot next to the title. When used in a tab/docking context, tab is selected when clicking the X + closure is not assumed (will wait for user to stop submitting the tab). Otherwise closure is assumed when pressing the X, so if you keep submitting the tab may reappear at end of tab bar.
	/// </summary>
	public const int ImGuiWindowFlags_UnsavedDocument = 262144;

	public const int ImGuiWindowFlags_NoNav = 196608;

	public const int ImGuiWindowFlags_NoDecoration = 43;

	public const int ImGuiWindowFlags_NoInputs = 197120;

	/// <summary>
	/// <para>[Internal]</para>
	/// </summary>
	/// <para/><summary>
	/// [BETA] On child window: share focus scope, allow gamepad/keyboard navigation to cross over parent border to this child or between sibling child windows.
	/// </summary>
	public const int ImGuiWindowFlags_NavFlattened = 8388608;

	/// <summary>
	/// Don't use! For internal use by BeginChild()
	/// </summary>
	public const int ImGuiWindowFlags_ChildWindow = 16777216;

	/// <summary>
	/// Don't use! For internal use by BeginTooltip()
	/// </summary>
	public const int ImGuiWindowFlags_Tooltip = 33554432;

	/// <summary>
	/// Don't use! For internal use by BeginPopup()
	/// </summary>
	public const int ImGuiWindowFlags_Popup = 67108864;

	/// <summary>
	/// Don't use! For internal use by BeginPopupModal()
	/// </summary>
	public const int ImGuiWindowFlags_Modal = 134217728;

	/// <summary>
	/// Don't use! For internal use by BeginMenu()
	/// </summary>
	public const int ImGuiWindowFlags_ChildMenu = 268435456;

	public const int ImGuiChildFlags_None = 0;

	/// <summary>
	/// Show an outer border and enable WindowPadding. (IMPORTANT: this is always == 1 == true for legacy reason)
	/// </summary>
	public const int ImGuiChildFlags_Border = 1;

	/// <summary>
	/// Pad with style.WindowPadding even if no border are drawn (no padding by default for non-bordered child windows because it makes more sense)
	/// </summary>
	public const int ImGuiChildFlags_AlwaysUseWindowPadding = 2;

	/// <summary>
	/// Allow resize from right border (layout direction). Enable .ini saving (unless ImGuiWindowFlags_NoSavedSettings passed to window flags)
	/// </summary>
	public const int ImGuiChildFlags_ResizeX = 4;

	/// <summary>
	/// Allow resize from bottom border (layout direction). "
	/// </summary>
	public const int ImGuiChildFlags_ResizeY = 8;

	/// <summary>
	/// Enable auto-resizing width. Read "IMPORTANT: Size measurement" details above.
	/// </summary>
	public const int ImGuiChildFlags_AutoResizeX = 16;

	/// <summary>
	/// Enable auto-resizing height. Read "IMPORTANT: Size measurement" details above.
	/// </summary>
	public const int ImGuiChildFlags_AutoResizeY = 32;

	/// <summary>
	/// Combined with AutoResizeX/AutoResizeY. Always measure size even when child is hidden, always return true, always disable clipping optimization! NOT RECOMMENDED.
	/// </summary>
	public const int ImGuiChildFlags_AlwaysAutoResize = 64;

	/// <summary>
	/// Style the child window like a framed item: use FrameBg, FrameRounding, FrameBorderSize, FramePadding instead of ChildBg, ChildRounding, ChildBorderSize, WindowPadding.
	/// </summary>
	public const int ImGuiChildFlags_FrameStyle = 128;

	public const int ImGuiInputTextFlags_None = 0;

	/// <summary>
	/// Allow 0123456789.+-*/
	/// </summary>
	public const int ImGuiInputTextFlags_CharsDecimal = 1;

	/// <summary>
	/// Allow 0123456789ABCDEFabcdef
	/// </summary>
	public const int ImGuiInputTextFlags_CharsHexadecimal = 2;

	/// <summary>
	/// Turn a..z into A..Z
	/// </summary>
	public const int ImGuiInputTextFlags_CharsUppercase = 4;

	/// <summary>
	/// Filter out spaces, tabs
	/// </summary>
	public const int ImGuiInputTextFlags_CharsNoBlank = 8;

	/// <summary>
	/// Select entire text when first taking mouse focus
	/// </summary>
	public const int ImGuiInputTextFlags_AutoSelectAll = 16;

	/// <summary>
	/// Return 'true' when Enter is pressed (as opposed to every time the value was modified). Consider looking at the IsItemDeactivatedAfterEdit() function.
	/// </summary>
	public const int ImGuiInputTextFlags_EnterReturnsTrue = 32;

	/// <summary>
	/// Callback on pressing TAB (for completion handling)
	/// </summary>
	public const int ImGuiInputTextFlags_CallbackCompletion = 64;

	/// <summary>
	/// Callback on pressing Up/Down arrows (for history handling)
	/// </summary>
	public const int ImGuiInputTextFlags_CallbackHistory = 128;

	/// <summary>
	/// Callback on each iteration. User code may query cursor position, modify text buffer.
	/// </summary>
	public const int ImGuiInputTextFlags_CallbackAlways = 256;

	/// <summary>
	/// Callback on character inputs to replace or discard them. Modify 'EventChar' to replace or discard, or return 1 in callback to discard.
	/// </summary>
	public const int ImGuiInputTextFlags_CallbackCharFilter = 512;

	/// <summary>
	/// Pressing TAB input a '\t' character into the text field
	/// </summary>
	public const int ImGuiInputTextFlags_AllowTabInput = 1024;

	/// <summary>
	/// In multi-line mode, unfocus with Enter, add new line with Ctrl+Enter (default is opposite: unfocus with Ctrl+Enter, add line with Enter).
	/// </summary>
	public const int ImGuiInputTextFlags_CtrlEnterForNewLine = 2048;

	/// <summary>
	/// Disable following the cursor horizontally
	/// </summary>
	public const int ImGuiInputTextFlags_NoHorizontalScroll = 4096;

	/// <summary>
	/// Overwrite mode
	/// </summary>
	public const int ImGuiInputTextFlags_AlwaysOverwrite = 8192;

	/// <summary>
	/// Read-only mode
	/// </summary>
	public const int ImGuiInputTextFlags_ReadOnly = 16384;

	/// <summary>
	/// Password mode, display all characters as '*'
	/// </summary>
	public const int ImGuiInputTextFlags_Password = 32768;

	/// <summary>
	/// Disable undo/redo. Note that input text owns the text data while active, if you want to provide your own undo/redo stack you need e.g. to call ClearActiveID().
	/// </summary>
	public const int ImGuiInputTextFlags_NoUndoRedo = 65536;

	/// <summary>
	/// Allow 0123456789.+-*/eE (Scientific notation input)
	/// </summary>
	public const int ImGuiInputTextFlags_CharsScientific = 131072;

	/// <summary>
	/// Callback on buffer capacity changes request (beyond 'buf_size' parameter value), allowing the string to grow. Notify when the string wants to be resized (for string types which hold a cache of their Size). You will be provided a new BufSize in the callback and NEED to honor it. (see misc/cpp/imgui_stdlib.h for an example of using this)
	/// </summary>
	public const int ImGuiInputTextFlags_CallbackResize = 262144;

	/// <summary>
	/// Callback on any edit (note that InputText() already returns true on edit, the callback is useful mainly to manipulate the underlying buffer while focus is active)
	/// </summary>
	public const int ImGuiInputTextFlags_CallbackEdit = 524288;

	/// <summary>
	/// Escape key clears content if not empty, and deactivate otherwise (contrast to default behavior of Escape to revert)
	/// </summary>
	public const int ImGuiInputTextFlags_EscapeClearsAll = 1048576;

	public const int ImGuiTreeNodeFlags_None = 0;

	/// <summary>
	/// Draw as selected
	/// </summary>
	public const int ImGuiTreeNodeFlags_Selected = 1;

	/// <summary>
	/// Draw frame with background (e.g. for CollapsingHeader)
	/// </summary>
	public const int ImGuiTreeNodeFlags_Framed = 2;

	/// <summary>
	/// Hit testing to allow subsequent widgets to overlap this one
	/// </summary>
	public const int ImGuiTreeNodeFlags_AllowOverlap = 4;

	/// <summary>
	/// Don't do a TreePush() when open (e.g. for CollapsingHeader) = no extra indent nor pushing on ID stack
	/// </summary>
	public const int ImGuiTreeNodeFlags_NoTreePushOnOpen = 8;

	/// <summary>
	/// Don't automatically and temporarily open node when Logging is active (by default logging will automatically open tree nodes)
	/// </summary>
	public const int ImGuiTreeNodeFlags_NoAutoOpenOnLog = 16;

	/// <summary>
	/// Default node to be open
	/// </summary>
	public const int ImGuiTreeNodeFlags_DefaultOpen = 32;

	/// <summary>
	/// Need double-click to open node
	/// </summary>
	public const int ImGuiTreeNodeFlags_OpenOnDoubleClick = 64;

	/// <summary>
	/// Only open when clicking on the arrow part. If ImGuiTreeNodeFlags_OpenOnDoubleClick is also set, single-click arrow or double-click all box to open.
	/// </summary>
	public const int ImGuiTreeNodeFlags_OpenOnArrow = 128;

	/// <summary>
	/// No collapsing, no arrow (use as a convenience for leaf nodes).
	/// </summary>
	public const int ImGuiTreeNodeFlags_Leaf = 256;

	/// <summary>
	/// Display a bullet instead of arrow. IMPORTANT: node can still be marked open/close if you don't set the _Leaf flag!
	/// </summary>
	public const int ImGuiTreeNodeFlags_Bullet = 512;

	/// <summary>
	/// Use FramePadding (even for an unframed text node) to vertically align text baseline to regular widget height. Equivalent to calling AlignTextToFramePadding().
	/// </summary>
	public const int ImGuiTreeNodeFlags_FramePadding = 1024;

	/// <summary>
	/// Extend hit box to the right-most edge, even if not framed. This is not the default in order to allow adding other items on the same line. In the future we may refactor the hit system to be front-to-back, allowing natural overlaps and then this can become the default.
	/// </summary>
	public const int ImGuiTreeNodeFlags_SpanAvailWidth = 2048;

	/// <summary>
	/// Extend hit box to the left-most and right-most edges (bypass the indented area).
	/// </summary>
	public const int ImGuiTreeNodeFlags_SpanFullWidth = 4096;

	/// <summary>
	/// Frame will span all columns of its container table (text will still fit in current column)
	/// </summary>
	public const int ImGuiTreeNodeFlags_SpanAllColumns = 8192;

	/// <summary>
	/// (WIP) Nav: left direction may move to this TreeNode() from any of its child (items submitted between TreeNode and TreePop)
	/// </summary>
	public const int ImGuiTreeNodeFlags_NavLeftJumpsBackHere = 16384;

	/// <summary>
	/// <para>ImGuiTreeNodeFlags_NoScrollOnOpen     = 1 &lt;&lt; 15,  // FIXME: TODO: Disable automatic scroll on TreePop() if node got just open and contents is not visible</para>
	/// </summary>
	public const int ImGuiTreeNodeFlags_CollapsingHeader = 26;

	public const int ImGuiPopupFlags_None = 0;

	/// <summary>
	/// For BeginPopupContext*(): open on Left Mouse release. Guaranteed to always be == 0 (same as ImGuiMouseButton_Left)
	/// </summary>
	public const int ImGuiPopupFlags_MouseButtonLeft = 0;

	/// <summary>
	/// For BeginPopupContext*(): open on Right Mouse release. Guaranteed to always be == 1 (same as ImGuiMouseButton_Right)
	/// </summary>
	public const int ImGuiPopupFlags_MouseButtonRight = 1;

	/// <summary>
	/// For BeginPopupContext*(): open on Middle Mouse release. Guaranteed to always be == 2 (same as ImGuiMouseButton_Middle)
	/// </summary>
	public const int ImGuiPopupFlags_MouseButtonMiddle = 2;

	public const int ImGuiPopupFlags_MouseButtonMask_ = 31;

	public const int ImGuiPopupFlags_MouseButtonDefault_ = 1;

	/// <summary>
	/// For OpenPopup*(), BeginPopupContext*(): don't reopen same popup if already open (won't reposition, won't reinitialize navigation)
	/// </summary>
	public const int ImGuiPopupFlags_NoReopen = 32;

	/// <summary>
	/// <para>ImGuiPopupFlags_NoReopenAlwaysNavInit = 1 &lt;&lt; 6,   // For OpenPopup*(), BeginPopupContext*(): focus and initialize navigation even when not reopening.</para>
	/// </summary>
	/// <para/><summary>
	/// For OpenPopup*(), BeginPopupContext*(): don't open if there's already a popup at the same level of the popup stack
	/// </summary>
	public const int ImGuiPopupFlags_NoOpenOverExistingPopup = 128;

	/// <summary>
	/// For BeginPopupContextWindow(): don't return true when hovering items, only when hovering empty space
	/// </summary>
	public const int ImGuiPopupFlags_NoOpenOverItems = 256;

	/// <summary>
	/// For IsPopupOpen(): ignore the ImGuiID parameter and test for any popup.
	/// </summary>
	public const int ImGuiPopupFlags_AnyPopupId = 1024;

	/// <summary>
	/// For IsPopupOpen(): search/test at any level of the popup stack (default test in the current level)
	/// </summary>
	public const int ImGuiPopupFlags_AnyPopupLevel = 2048;

	public const int ImGuiPopupFlags_AnyPopup = 3072;

	public const int ImGuiSelectableFlags_None = 0;

	/// <summary>
	/// Clicking this doesn't close parent popup window
	/// </summary>
	public const int ImGuiSelectableFlags_DontClosePopups = 1;

	/// <summary>
	/// Frame will span all columns of its container table (text will still fit in current column)
	/// </summary>
	public const int ImGuiSelectableFlags_SpanAllColumns = 2;

	/// <summary>
	/// Generate press events on double clicks too
	/// </summary>
	public const int ImGuiSelectableFlags_AllowDoubleClick = 4;

	/// <summary>
	/// Cannot be selected, display grayed out text
	/// </summary>
	public const int ImGuiSelectableFlags_Disabled = 8;

	/// <summary>
	/// (WIP) Hit testing to allow subsequent widgets to overlap this one
	/// </summary>
	public const int ImGuiSelectableFlags_AllowOverlap = 16;

	public const int ImGuiComboFlags_None = 0;

	/// <summary>
	/// Align the popup toward the left by default
	/// </summary>
	public const int ImGuiComboFlags_PopupAlignLeft = 1;

	/// <summary>
	/// Max ~4 items visible. Tip: If you want your combo popup to be a specific size you can use SetNextWindowSizeConstraints() prior to calling BeginCombo()
	/// </summary>
	public const int ImGuiComboFlags_HeightSmall = 2;

	/// <summary>
	/// Max ~8 items visible (default)
	/// </summary>
	public const int ImGuiComboFlags_HeightRegular = 4;

	/// <summary>
	/// Max ~20 items visible
	/// </summary>
	public const int ImGuiComboFlags_HeightLarge = 8;

	/// <summary>
	/// As many fitting items as possible
	/// </summary>
	public const int ImGuiComboFlags_HeightLargest = 16;

	/// <summary>
	/// Display on the preview box without the square arrow button
	/// </summary>
	public const int ImGuiComboFlags_NoArrowButton = 32;

	/// <summary>
	/// Display only a square arrow button
	/// </summary>
	public const int ImGuiComboFlags_NoPreview = 64;

	/// <summary>
	/// Width dynamically calculated from preview contents
	/// </summary>
	public const int ImGuiComboFlags_WidthFitPreview = 128;

	public const int ImGuiComboFlags_HeightMask_ = 30;

	public const int ImGuiTabBarFlags_None = 0;

	/// <summary>
	/// Allow manually dragging tabs to re-order them + New tabs are appended at the end of list
	/// </summary>
	public const int ImGuiTabBarFlags_Reorderable = 1;

	/// <summary>
	/// Automatically select new tabs when they appear
	/// </summary>
	public const int ImGuiTabBarFlags_AutoSelectNewTabs = 2;

	/// <summary>
	/// Disable buttons to open the tab list popup
	/// </summary>
	public const int ImGuiTabBarFlags_TabListPopupButton = 4;

	/// <summary>
	/// Disable behavior of closing tabs (that are submitted with p_open != NULL) with middle mouse button. You may handle this behavior manually on user's side with if (IsItemHovered() &amp;&amp; IsMouseClicked(2)) *p_open = false.
	/// </summary>
	public const int ImGuiTabBarFlags_NoCloseWithMiddleMouseButton = 8;

	/// <summary>
	/// Disable scrolling buttons (apply when fitting policy is ImGuiTabBarFlags_FittingPolicyScroll)
	/// </summary>
	public const int ImGuiTabBarFlags_NoTabListScrollingButtons = 16;

	/// <summary>
	/// Disable tooltips when hovering a tab
	/// </summary>
	public const int ImGuiTabBarFlags_NoTooltip = 32;

	/// <summary>
	/// Resize tabs when they don't fit
	/// </summary>
	public const int ImGuiTabBarFlags_FittingPolicyResizeDown = 64;

	/// <summary>
	/// Add scroll buttons when tabs don't fit
	/// </summary>
	public const int ImGuiTabBarFlags_FittingPolicyScroll = 128;

	public const int ImGuiTabBarFlags_FittingPolicyMask_ = 192;

	public const int ImGuiTabBarFlags_FittingPolicyDefault_ = 64;

	public const int ImGuiTabItemFlags_None = 0;

	/// <summary>
	/// Display a dot next to the title + set ImGuiTabItemFlags_NoAssumedClosure.
	/// </summary>
	public const int ImGuiTabItemFlags_UnsavedDocument = 1;

	/// <summary>
	/// Trigger flag to programmatically make the tab selected when calling BeginTabItem()
	/// </summary>
	public const int ImGuiTabItemFlags_SetSelected = 2;

	/// <summary>
	/// Disable behavior of closing tabs (that are submitted with p_open != NULL) with middle mouse button. You may handle this behavior manually on user's side with if (IsItemHovered() &amp;&amp; IsMouseClicked(2)) *p_open = false.
	/// </summary>
	public const int ImGuiTabItemFlags_NoCloseWithMiddleMouseButton = 4;

	/// <summary>
	/// Don't call PushID()/PopID() on BeginTabItem()/EndTabItem()
	/// </summary>
	public const int ImGuiTabItemFlags_NoPushId = 8;

	/// <summary>
	/// Disable tooltip for the given tab
	/// </summary>
	public const int ImGuiTabItemFlags_NoTooltip = 16;

	/// <summary>
	/// Disable reordering this tab or having another tab cross over this tab
	/// </summary>
	public const int ImGuiTabItemFlags_NoReorder = 32;

	/// <summary>
	/// Enforce the tab position to the left of the tab bar (after the tab list popup button)
	/// </summary>
	public const int ImGuiTabItemFlags_Leading = 64;

	/// <summary>
	/// Enforce the tab position to the right of the tab bar (before the scrolling buttons)
	/// </summary>
	public const int ImGuiTabItemFlags_Trailing = 128;

	/// <summary>
	/// Tab is selected when trying to close + closure is not immediately assumed (will wait for user to stop submitting the tab). Otherwise closure is assumed when pressing the X, so if you keep submitting the tab may reappear at end of tab bar.
	/// </summary>
	public const int ImGuiTabItemFlags_NoAssumedClosure = 256;

	public const int ImGuiFocusedFlags_None = 0;

	/// <summary>
	/// Return true if any children of the window is focused
	/// </summary>
	public const int ImGuiFocusedFlags_ChildWindows = 1;

	/// <summary>
	/// Test from root window (top most parent of the current hierarchy)
	/// </summary>
	public const int ImGuiFocusedFlags_RootWindow = 2;

	/// <summary>
	/// Return true if any window is focused. Important: If you are trying to tell how to dispatch your low-level inputs, do NOT use this. Use 'io.WantCaptureMouse' instead! Please read the FAQ!
	/// </summary>
	public const int ImGuiFocusedFlags_AnyWindow = 4;

	/// <summary>
	/// Do not consider popup hierarchy (do not treat popup emitter as parent of popup) (when used with _ChildWindows or _RootWindow)
	/// </summary>
	public const int ImGuiFocusedFlags_NoPopupHierarchy = 8;

	/// <summary>
	/// <para>ImGuiFocusedFlags_DockHierarchy               = 1 &lt;&lt; 4,   // Consider docking hierarchy (treat dockspace host as parent of docked window) (when used with _ChildWindows or _RootWindow)</para>
	/// </summary>
	public const int ImGuiFocusedFlags_RootAndChildWindows = 3;

	/// <summary>
	/// Return true if directly over the item/window, not obstructed by another window, not obstructed by an active popup or modal blocking inputs under them.
	/// </summary>
	public const int ImGuiHoveredFlags_None = 0;

	/// <summary>
	/// IsWindowHovered() only: Return true if any children of the window is hovered
	/// </summary>
	public const int ImGuiHoveredFlags_ChildWindows = 1;

	/// <summary>
	/// IsWindowHovered() only: Test from root window (top most parent of the current hierarchy)
	/// </summary>
	public const int ImGuiHoveredFlags_RootWindow = 2;

	/// <summary>
	/// IsWindowHovered() only: Return true if any window is hovered
	/// </summary>
	public const int ImGuiHoveredFlags_AnyWindow = 4;

	/// <summary>
	/// IsWindowHovered() only: Do not consider popup hierarchy (do not treat popup emitter as parent of popup) (when used with _ChildWindows or _RootWindow)
	/// </summary>
	public const int ImGuiHoveredFlags_NoPopupHierarchy = 8;

	/// <summary>
	/// <para>ImGuiHoveredFlags_DockHierarchy               = 1 &lt;&lt; 4,   // IsWindowHovered() only: Consider docking hierarchy (treat dockspace host as parent of docked window) (when used with _ChildWindows or _RootWindow)</para>
	/// </summary>
	/// <para/><summary>
	/// Return true even if a popup window is normally blocking access to this item/window
	/// </summary>
	public const int ImGuiHoveredFlags_AllowWhenBlockedByPopup = 32;

	/// <summary>
	/// <para>ImGuiHoveredFlags_AllowWhenBlockedByModal     = 1 &lt;&lt; 6,   // Return true even if a modal popup window is normally blocking access to this item/window. FIXME-TODO: Unavailable yet.</para>
	/// </summary>
	/// <para/><summary>
	/// Return true even if an active item is blocking access to this item/window. Useful for Drag and Drop patterns.
	/// </summary>
	public const int ImGuiHoveredFlags_AllowWhenBlockedByActiveItem = 128;

	/// <summary>
	/// IsItemHovered() only: Return true even if the item uses AllowOverlap mode and is overlapped by another hoverable item.
	/// </summary>
	public const int ImGuiHoveredFlags_AllowWhenOverlappedByItem = 256;

	/// <summary>
	/// IsItemHovered() only: Return true even if the position is obstructed or overlapped by another window.
	/// </summary>
	public const int ImGuiHoveredFlags_AllowWhenOverlappedByWindow = 512;

	/// <summary>
	/// IsItemHovered() only: Return true even if the item is disabled
	/// </summary>
	public const int ImGuiHoveredFlags_AllowWhenDisabled = 1024;

	/// <summary>
	/// IsItemHovered() only: Disable using gamepad/keyboard navigation state when active, always query mouse
	/// </summary>
	public const int ImGuiHoveredFlags_NoNavOverride = 2048;

	public const int ImGuiHoveredFlags_AllowWhenOverlapped = 768;

	public const int ImGuiHoveredFlags_RectOnly = 928;

	public const int ImGuiHoveredFlags_RootAndChildWindows = 3;

	/// <summary>
	/// <para>Tooltips mode</para>
	/// <para>- typically used in IsItemHovered() + SetTooltip() sequence.</para>
	/// <para>- this is a shortcut to pull flags from 'style.HoverFlagsForTooltipMouse' or 'style.HoverFlagsForTooltipNav' where you can reconfigure desired behavior.</para>
	/// <para>  e.g. 'TooltipHoveredFlagsForMouse' defaults to 'ImGuiHoveredFlags_Stationary | ImGuiHoveredFlags_DelayShort'.</para>
	/// <para>- for frequently actioned or hovered items providing a tooltip, you want may to use ImGuiHoveredFlags_ForTooltip (stationary + delay) so the tooltip doesn't show too often.</para>
	/// <para>- for items which main purpose is to be hovered, or items with low affordance, or in less consistent apps, prefer no delay or shorter delay.</para>
	/// </summary>
	/// <para/><summary>
	/// Shortcut for standard flags when using IsItemHovered() + SetTooltip() sequence.
	/// </summary>
	public const int ImGuiHoveredFlags_ForTooltip = 4096;

	/// <summary>
	/// <para>(Advanced) Mouse Hovering delays.</para>
	/// <para>- generally you can use ImGuiHoveredFlags_ForTooltip to use application-standardized flags.</para>
	/// <para>- use those if you need specific overrides.</para>
	/// </summary>
	/// <para/><summary>
	/// Require mouse to be stationary for style.HoverStationaryDelay (~0.15 sec) _at least one time_. After this, can move on same item/window. Using the stationary test tends to reduces the need for a long delay.
	/// </summary>
	public const int ImGuiHoveredFlags_Stationary = 8192;

	/// <summary>
	/// IsItemHovered() only: Return true immediately (default). As this is the default you generally ignore this.
	/// </summary>
	public const int ImGuiHoveredFlags_DelayNone = 16384;

	/// <summary>
	/// IsItemHovered() only: Return true after style.HoverDelayShort elapsed (~0.15 sec) (shared between items) + requires mouse to be stationary for style.HoverStationaryDelay (once per item).
	/// </summary>
	public const int ImGuiHoveredFlags_DelayShort = 32768;

	/// <summary>
	/// IsItemHovered() only: Return true after style.HoverDelayNormal elapsed (~0.40 sec) (shared between items) + requires mouse to be stationary for style.HoverStationaryDelay (once per item).
	/// </summary>
	public const int ImGuiHoveredFlags_DelayNormal = 65536;

	/// <summary>
	/// IsItemHovered() only: Disable shared delay system where moving from one item to the next keeps the previous timer for a short time (standard for tooltips with long delays)
	/// </summary>
	public const int ImGuiHoveredFlags_NoSharedDelay = 131072;

	public const int ImGuiDragDropFlags_None = 0;

	/// <summary>
	/// <para>BeginDragDropSource() flags</para>
	/// </summary>
	/// <para/><summary>
	/// Disable preview tooltip. By default, a successful call to BeginDragDropSource opens a tooltip so you can display a preview or description of the source contents. This flag disables this behavior.
	/// </summary>
	public const int ImGuiDragDropFlags_SourceNoPreviewTooltip = 1;

	/// <summary>
	/// By default, when dragging we clear data so that IsItemHovered() will return false, to avoid subsequent user code submitting tooltips. This flag disables this behavior so you can still call IsItemHovered() on the source item.
	/// </summary>
	public const int ImGuiDragDropFlags_SourceNoDisableHover = 2;

	/// <summary>
	/// Disable the behavior that allows to open tree nodes and collapsing header by holding over them while dragging a source item.
	/// </summary>
	public const int ImGuiDragDropFlags_SourceNoHoldToOpenOthers = 4;

	/// <summary>
	/// Allow items such as Text(), Image() that have no unique identifier to be used as drag source, by manufacturing a temporary identifier based on their window-relative position. This is extremely unusual within the dear imgui ecosystem and so we made it explicit.
	/// </summary>
	public const int ImGuiDragDropFlags_SourceAllowNullID = 8;

	/// <summary>
	/// External source (from outside of dear imgui), won't attempt to read current item/window info. Will always return true. Only one Extern source can be active simultaneously.
	/// </summary>
	public const int ImGuiDragDropFlags_SourceExtern = 16;

	/// <summary>
	/// Automatically expire the payload if the source cease to be submitted (otherwise payloads are persisting while being dragged)
	/// </summary>
	public const int ImGuiDragDropFlags_SourceAutoExpirePayload = 32;

	/// <summary>
	/// <para>AcceptDragDropPayload() flags</para>
	/// </summary>
	/// <para/><summary>
	/// AcceptDragDropPayload() will returns true even before the mouse button is released. You can then call IsDelivery() to test if the payload needs to be delivered.
	/// </summary>
	public const int ImGuiDragDropFlags_AcceptBeforeDelivery = 1024;

	/// <summary>
	/// Do not draw the default highlight rectangle when hovering over target.
	/// </summary>
	public const int ImGuiDragDropFlags_AcceptNoDrawDefaultRect = 2048;

	/// <summary>
	/// Request hiding the BeginDragDropSource tooltip from the BeginDragDropTarget site.
	/// </summary>
	public const int ImGuiDragDropFlags_AcceptNoPreviewTooltip = 4096;

	/// <summary>
	/// For peeking ahead and inspecting the payload before delivery.
	/// </summary>
	public const int ImGuiDragDropFlags_AcceptPeekOnly = 3072;

	/// <summary>
	/// signed char / char (with sensible compilers)
	/// </summary>
	public const int ImGuiDataType_S8 = 0;

	/// <summary>
	/// unsigned char
	/// </summary>
	public const int ImGuiDataType_U8 = 1;

	/// <summary>
	/// short
	/// </summary>
	public const int ImGuiDataType_S16 = 2;

	/// <summary>
	/// unsigned short
	/// </summary>
	public const int ImGuiDataType_U16 = 3;

	/// <summary>
	/// int
	/// </summary>
	public const int ImGuiDataType_S32 = 4;

	/// <summary>
	/// unsigned int
	/// </summary>
	public const int ImGuiDataType_U32 = 5;

	/// <summary>
	/// long long / __int64
	/// </summary>
	public const int ImGuiDataType_S64 = 6;

	/// <summary>
	/// unsigned long long / unsigned __int64
	/// </summary>
	public const int ImGuiDataType_U64 = 7;

	/// <summary>
	/// float
	/// </summary>
	public const int ImGuiDataType_Float = 8;

	/// <summary>
	/// double
	/// </summary>
	public const int ImGuiDataType_Double = 9;

	public const int ImGuiDataType_COUNT = 10;

	public const int ImGuiDir_None = -1;

	public const int ImGuiDir_Left = 0;

	public const int ImGuiDir_Right = 1;

	public const int ImGuiDir_Up = 2;

	public const int ImGuiDir_Down = 3;

	public const int ImGuiDir_COUNT = 4;

	public const int ImGuiSortDirection_None = 0;

	/// <summary>
	/// Ascending = 0-&gt;9, A-&gt;Z etc.
	/// </summary>
	public const int ImGuiSortDirection_Ascending = 1;

	/// <summary>
	/// Descending = 9-&gt;0, Z-&gt;A etc.
	/// </summary>
	public const int ImGuiSortDirection_Descending = 2;

	/// <summary>
	/// <para>Keyboard</para>
	/// </summary>
	public const int ImGuiKey_None = 0;

	/// <summary>
	/// == ImGuiKey_NamedKey_BEGIN
	/// </summary>
	public const int ImGuiKey_Tab = 512;

	public const int ImGuiKey_LeftArrow = 513;

	public const int ImGuiKey_RightArrow = 514;

	public const int ImGuiKey_UpArrow = 515;

	public const int ImGuiKey_DownArrow = 516;

	public const int ImGuiKey_PageUp = 517;

	public const int ImGuiKey_PageDown = 518;

	public const int ImGuiKey_Home = 519;

	public const int ImGuiKey_End = 520;

	public const int ImGuiKey_Insert = 521;

	public const int ImGuiKey_Delete = 522;

	public const int ImGuiKey_Backspace = 523;

	public const int ImGuiKey_Space = 524;

	public const int ImGuiKey_Enter = 525;

	public const int ImGuiKey_Escape = 526;

	public const int ImGuiKey_LeftCtrl = 527;

	public const int ImGuiKey_LeftShift = 528;

	public const int ImGuiKey_LeftAlt = 529;

	public const int ImGuiKey_LeftSuper = 530;

	public const int ImGuiKey_RightCtrl = 531;

	public const int ImGuiKey_RightShift = 532;

	public const int ImGuiKey_RightAlt = 533;

	public const int ImGuiKey_RightSuper = 534;

	public const int ImGuiKey_Menu = 535;

	public const int ImGuiKey_0 = 536;

	public const int ImGuiKey_1 = 537;

	public const int ImGuiKey_2 = 538;

	public const int ImGuiKey_3 = 539;

	public const int ImGuiKey_4 = 540;

	public const int ImGuiKey_5 = 541;

	public const int ImGuiKey_6 = 542;

	public const int ImGuiKey_7 = 543;

	public const int ImGuiKey_8 = 544;

	public const int ImGuiKey_9 = 545;

	public const int ImGuiKey_A = 546;

	public const int ImGuiKey_B = 547;

	public const int ImGuiKey_C = 548;

	public const int ImGuiKey_D = 549;

	public const int ImGuiKey_E = 550;

	public const int ImGuiKey_F = 551;

	public const int ImGuiKey_G = 552;

	public const int ImGuiKey_H = 553;

	public const int ImGuiKey_I = 554;

	public const int ImGuiKey_J = 555;

	public const int ImGuiKey_K = 556;

	public const int ImGuiKey_L = 557;

	public const int ImGuiKey_M = 558;

	public const int ImGuiKey_N = 559;

	public const int ImGuiKey_O = 560;

	public const int ImGuiKey_P = 561;

	public const int ImGuiKey_Q = 562;

	public const int ImGuiKey_R = 563;

	public const int ImGuiKey_S = 564;

	public const int ImGuiKey_T = 565;

	public const int ImGuiKey_U = 566;

	public const int ImGuiKey_V = 567;

	public const int ImGuiKey_W = 568;

	public const int ImGuiKey_X = 569;

	public const int ImGuiKey_Y = 570;

	public const int ImGuiKey_Z = 571;

	public const int ImGuiKey_F1 = 572;

	public const int ImGuiKey_F2 = 573;

	public const int ImGuiKey_F3 = 574;

	public const int ImGuiKey_F4 = 575;

	public const int ImGuiKey_F5 = 576;

	public const int ImGuiKey_F6 = 577;

	public const int ImGuiKey_F7 = 578;

	public const int ImGuiKey_F8 = 579;

	public const int ImGuiKey_F9 = 580;

	public const int ImGuiKey_F10 = 581;

	public const int ImGuiKey_F11 = 582;

	public const int ImGuiKey_F12 = 583;

	public const int ImGuiKey_F13 = 584;

	public const int ImGuiKey_F14 = 585;

	public const int ImGuiKey_F15 = 586;

	public const int ImGuiKey_F16 = 587;

	public const int ImGuiKey_F17 = 588;

	public const int ImGuiKey_F18 = 589;

	public const int ImGuiKey_F19 = 590;

	public const int ImGuiKey_F20 = 591;

	public const int ImGuiKey_F21 = 592;

	public const int ImGuiKey_F22 = 593;

	public const int ImGuiKey_F23 = 594;

	public const int ImGuiKey_F24 = 595;

	/// <summary>
	/// '
	/// </summary>
	public const int ImGuiKey_Apostrophe = 596;

	/// <summary>
	/// ,
	/// </summary>
	public const int ImGuiKey_Comma = 597;

	/// <summary>
	/// -
	/// </summary>
	public const int ImGuiKey_Minus = 598;

	/// <summary>
	/// .
	/// </summary>
	public const int ImGuiKey_Period = 599;

	/// <summary>
	/// /
	/// </summary>
	public const int ImGuiKey_Slash = 600;

	/// <summary>
	/// ;
	/// </summary>
	public const int ImGuiKey_Semicolon = 601;

	/// <summary>
	/// =
	/// </summary>
	public const int ImGuiKey_Equal = 602;

	/// <summary>
	/// [
	/// </summary>
	public const int ImGuiKey_LeftBracket = 603;

	/// <summary>
	/// \ (this text inhibit multiline comment caused by backslash)
	/// </summary>
	public const int ImGuiKey_Backslash = 604;

	/// <summary>
	/// ]
	/// </summary>
	public const int ImGuiKey_RightBracket = 605;

	/// <summary>
	/// `
	/// </summary>
	public const int ImGuiKey_GraveAccent = 606;

	public const int ImGuiKey_CapsLock = 607;

	public const int ImGuiKey_ScrollLock = 608;

	public const int ImGuiKey_NumLock = 609;

	public const int ImGuiKey_PrintScreen = 610;

	public const int ImGuiKey_Pause = 611;

	public const int ImGuiKey_Keypad0 = 612;

	public const int ImGuiKey_Keypad1 = 613;

	public const int ImGuiKey_Keypad2 = 614;

	public const int ImGuiKey_Keypad3 = 615;

	public const int ImGuiKey_Keypad4 = 616;

	public const int ImGuiKey_Keypad5 = 617;

	public const int ImGuiKey_Keypad6 = 618;

	public const int ImGuiKey_Keypad7 = 619;

	public const int ImGuiKey_Keypad8 = 620;

	public const int ImGuiKey_Keypad9 = 621;

	public const int ImGuiKey_KeypadDecimal = 622;

	public const int ImGuiKey_KeypadDivide = 623;

	public const int ImGuiKey_KeypadMultiply = 624;

	public const int ImGuiKey_KeypadSubtract = 625;

	public const int ImGuiKey_KeypadAdd = 626;

	public const int ImGuiKey_KeypadEnter = 627;

	public const int ImGuiKey_KeypadEqual = 628;

	/// <summary>
	/// Available on some keyboard/mouses. Often referred as "Browser Back"
	/// </summary>
	public const int ImGuiKey_AppBack = 629;

	public const int ImGuiKey_AppForward = 630;

	/// <summary>
	/// <para>Gamepad (some of those are analog values, 0.0f to 1.0f)                          // NAVIGATION ACTION</para>
	/// <para>(download controller mapping PNG/PSD at http://dearimgui.com/controls_sheets)</para>
	/// </summary>
	/// <para/><summary>
	/// Menu (Xbox)      + (Switch)   Start/Options (PS)
	/// </summary>
	public const int ImGuiKey_GamepadStart = 631;

	/// <summary>
	/// View (Xbox)      - (Switch)   Share (PS)
	/// </summary>
	public const int ImGuiKey_GamepadBack = 632;

	/// <summary>
	/// X (Xbox)         Y (Switch)   Square (PS)        // Tap: Toggle Menu. Hold: Windowing mode (Focus/Move/Resize windows)
	/// </summary>
	public const int ImGuiKey_GamepadFaceLeft = 633;

	/// <summary>
	/// B (Xbox)         A (Switch)   Circle (PS)        // Cancel / Close / Exit
	/// </summary>
	public const int ImGuiKey_GamepadFaceRight = 634;

	/// <summary>
	/// Y (Xbox)         X (Switch)   Triangle (PS)      // Text Input / On-screen Keyboard
	/// </summary>
	public const int ImGuiKey_GamepadFaceUp = 635;

	/// <summary>
	/// A (Xbox)         B (Switch)   Cross (PS)         // Activate / Open / Toggle / Tweak
	/// </summary>
	public const int ImGuiKey_GamepadFaceDown = 636;

	/// <summary>
	/// D-pad Left                                       // Move / Tweak / Resize Window (in Windowing mode)
	/// </summary>
	public const int ImGuiKey_GamepadDpadLeft = 637;

	/// <summary>
	/// D-pad Right                                      // Move / Tweak / Resize Window (in Windowing mode)
	/// </summary>
	public const int ImGuiKey_GamepadDpadRight = 638;

	/// <summary>
	/// D-pad Up                                         // Move / Tweak / Resize Window (in Windowing mode)
	/// </summary>
	public const int ImGuiKey_GamepadDpadUp = 639;

	/// <summary>
	/// D-pad Down                                       // Move / Tweak / Resize Window (in Windowing mode)
	/// </summary>
	public const int ImGuiKey_GamepadDpadDown = 640;

	/// <summary>
	/// L Bumper (Xbox)  L (Switch)   L1 (PS)            // Tweak Slower / Focus Previous (in Windowing mode)
	/// </summary>
	public const int ImGuiKey_GamepadL1 = 641;

	/// <summary>
	/// R Bumper (Xbox)  R (Switch)   R1 (PS)            // Tweak Faster / Focus Next (in Windowing mode)
	/// </summary>
	public const int ImGuiKey_GamepadR1 = 642;

	/// <summary>
	/// L Trig. (Xbox)   ZL (Switch)  L2 (PS) [Analog]
	/// </summary>
	public const int ImGuiKey_GamepadL2 = 643;

	/// <summary>
	/// R Trig. (Xbox)   ZR (Switch)  R2 (PS) [Analog]
	/// </summary>
	public const int ImGuiKey_GamepadR2 = 644;

	/// <summary>
	/// L Stick (Xbox)   L3 (Switch)  L3 (PS)
	/// </summary>
	public const int ImGuiKey_GamepadL3 = 645;

	/// <summary>
	/// R Stick (Xbox)   R3 (Switch)  R3 (PS)
	/// </summary>
	public const int ImGuiKey_GamepadR3 = 646;

	/// <summary>
	/// [Analog]                                         // Move Window (in Windowing mode)
	/// </summary>
	public const int ImGuiKey_GamepadLStickLeft = 647;

	/// <summary>
	/// [Analog]                                         // Move Window (in Windowing mode)
	/// </summary>
	public const int ImGuiKey_GamepadLStickRight = 648;

	/// <summary>
	/// [Analog]                                         // Move Window (in Windowing mode)
	/// </summary>
	public const int ImGuiKey_GamepadLStickUp = 649;

	/// <summary>
	/// [Analog]                                         // Move Window (in Windowing mode)
	/// </summary>
	public const int ImGuiKey_GamepadLStickDown = 650;

	/// <summary>
	/// [Analog]
	/// </summary>
	public const int ImGuiKey_GamepadRStickLeft = 651;

	/// <summary>
	/// [Analog]
	/// </summary>
	public const int ImGuiKey_GamepadRStickRight = 652;

	/// <summary>
	/// [Analog]
	/// </summary>
	public const int ImGuiKey_GamepadRStickUp = 653;

	/// <summary>
	/// [Analog]
	/// </summary>
	public const int ImGuiKey_GamepadRStickDown = 654;

	/// <summary>
	/// <para>Aliases: Mouse Buttons (auto-submitted from AddMouseButtonEvent() calls)</para>
	/// <para>- This is mirroring the data also written to io.MouseDown[], io.MouseWheel, in a format allowing them to be accessed via standard key API.</para>
	/// </summary>
	public const int ImGuiKey_MouseLeft = 655;

	public const int ImGuiKey_MouseRight = 656;

	public const int ImGuiKey_MouseMiddle = 657;

	public const int ImGuiKey_MouseX1 = 658;

	public const int ImGuiKey_MouseX2 = 659;

	public const int ImGuiKey_MouseWheelX = 660;

	public const int ImGuiKey_MouseWheelY = 661;

	/// <summary>
	/// <para>[Internal] Reserved for mod storage</para>
	/// </summary>
	public const int ImGuiKey_ReservedForModCtrl = 662;

	public const int ImGuiKey_ReservedForModShift = 663;

	public const int ImGuiKey_ReservedForModAlt = 664;

	public const int ImGuiKey_ReservedForModSuper = 665;

	public const int ImGuiKey_COUNT = 666;

	/// <summary>
	/// <para>Keyboard Modifiers (explicitly submitted by backend via AddKeyEvent() calls)</para>
	/// <para>- This is mirroring the data also written to io.KeyCtrl, io.KeyShift, io.KeyAlt, io.KeySuper, in a format allowing</para>
	/// <para>  them to be accessed via standard key API, allowing calls such as IsKeyPressed(), IsKeyReleased(), querying duration etc.</para>
	/// <para>- Code polling every key (e.g. an interface to detect a key press for input mapping) might want to ignore those</para>
	/// <para>  and prefer using the real keys (e.g. ImGuiKey_LeftCtrl, ImGuiKey_RightCtrl instead of ImGuiMod_Ctrl).</para>
	/// <para>- In theory the value of keyboard modifiers should be roughly equivalent to a logical or of the equivalent left/right keys.</para>
	/// <para>  In practice: it's complicated; mods are often provided from different sources. Keyboard layout, IME, sticky keys and</para>
	/// <para>  backends tend to interfere and break that equivalence. The safer decision is to relay that ambiguity down to the end-user...</para>
	/// </summary>
	public const int ImGuiMod_None = 0;

	/// <summary>
	/// Ctrl
	/// </summary>
	public const int ImGuiMod_Ctrl = 4096;

	/// <summary>
	/// Shift
	/// </summary>
	public const int ImGuiMod_Shift = 8192;

	/// <summary>
	/// Option/Menu
	/// </summary>
	public const int ImGuiMod_Alt = 16384;

	/// <summary>
	/// Cmd/Super/Windows
	/// </summary>
	public const int ImGuiMod_Super = 32768;

	/// <summary>
	/// Alias for Ctrl (non-macOS) _or_ Super (macOS).
	/// </summary>
	public const int ImGuiMod_Shortcut = 2048;

	/// <summary>
	/// 5-bits
	/// </summary>
	public const int ImGuiMod_Mask_ = 63488;

	/// <summary>
	/// <para>[Internal] Prior to 1.87 we required user to fill io.KeysDown[512] using their own native index + the io.KeyMap[] array.</para>
	/// <para>We are ditching this method but keeping a legacy path for user code doing e.g. IsKeyPressed(MY_NATIVE_KEY_CODE)</para>
	/// <para>If you need to iterate all keys (for e.g. an input mapper) you may use ImGuiKey_NamedKey_BEGIN..ImGuiKey_NamedKey_END.</para>
	/// </summary>
	public const int ImGuiKey_NamedKey_BEGIN = 512;

	public const int ImGuiKey_NamedKey_END = 666;

	public const int ImGuiKey_NamedKey_COUNT = 154;

	/// <summary>
	/// Size of KeysData[]: only hold named keys
	/// </summary>
	public const int ImGuiKey_KeysData_SIZE = 154;

	/// <summary>
	/// Accesses to io.KeysData[] must use (key - ImGuiKey_KeysData_OFFSET) index.
	/// </summary>
	public const int ImGuiKey_KeysData_OFFSET = 512;

	public const int ImGuiConfigFlags_None = 0;

	/// <summary>
	/// Master keyboard navigation enable flag. Enable full Tabbing + directional arrows + space/enter to activate.
	/// </summary>
	public const int ImGuiConfigFlags_NavEnableKeyboard = 1;

	/// <summary>
	/// Master gamepad navigation enable flag. Backend also needs to set ImGuiBackendFlags_HasGamepad.
	/// </summary>
	public const int ImGuiConfigFlags_NavEnableGamepad = 2;

	/// <summary>
	/// Instruct navigation to move the mouse cursor. May be useful on TV/console systems where moving a virtual mouse is awkward. Will update io.MousePos and set io.WantSetMousePos=true. If enabled you MUST honor io.WantSetMousePos requests in your backend, otherwise ImGui will react as if the mouse is jumping around back and forth.
	/// </summary>
	public const int ImGuiConfigFlags_NavEnableSetMousePos = 4;

	/// <summary>
	/// Instruct navigation to not set the io.WantCaptureKeyboard flag when io.NavActive is set.
	/// </summary>
	public const int ImGuiConfigFlags_NavNoCaptureKeyboard = 8;

	/// <summary>
	/// Instruct imgui to clear mouse position/buttons in NewFrame(). This allows ignoring the mouse information set by the backend.
	/// </summary>
	public const int ImGuiConfigFlags_NoMouse = 16;

	/// <summary>
	/// Instruct backend to not alter mouse cursor shape and visibility. Use if the backend cursor changes are interfering with yours and you don't want to use SetMouseCursor() to change mouse cursor. You may want to honor requests from imgui by reading GetMouseCursor() yourself instead.
	/// </summary>
	public const int ImGuiConfigFlags_NoMouseCursorChange = 32;

	/// <summary>
	/// <para>User storage (to allow your backend/engine to communicate to code that may be shared between multiple projects. Those flags are NOT used by core Dear ImGui)</para>
	/// </summary>
	/// <para/><summary>
	/// Application is SRGB-aware.
	/// </summary>
	public const int ImGuiConfigFlags_IsSRGB = 1048576;

	/// <summary>
	/// Application is using a touch screen instead of a mouse.
	/// </summary>
	public const int ImGuiConfigFlags_IsTouchScreen = 2097152;

	public const int ImGuiBackendFlags_None = 0;

	/// <summary>
	/// Backend Platform supports gamepad and currently has one connected.
	/// </summary>
	public const int ImGuiBackendFlags_HasGamepad = 1;

	/// <summary>
	/// Backend Platform supports honoring GetMouseCursor() value to change the OS cursor shape.
	/// </summary>
	public const int ImGuiBackendFlags_HasMouseCursors = 2;

	/// <summary>
	/// Backend Platform supports io.WantSetMousePos requests to reposition the OS mouse position (only used if ImGuiConfigFlags_NavEnableSetMousePos is set).
	/// </summary>
	public const int ImGuiBackendFlags_HasSetMousePos = 4;

	/// <summary>
	/// Backend Renderer supports ImDrawCmd::VtxOffset. This enables output of large meshes (64K+ vertices) while still using 16-bit indices.
	/// </summary>
	public const int ImGuiBackendFlags_RendererHasVtxOffset = 8;

	public const int ImGuiCol_Text = 0;

	public const int ImGuiCol_TextDisabled = 1;

	/// <summary>
	/// Background of normal windows
	/// </summary>
	public const int ImGuiCol_WindowBg = 2;

	/// <summary>
	/// Background of child windows
	/// </summary>
	public const int ImGuiCol_ChildBg = 3;

	/// <summary>
	/// Background of popups, menus, tooltips windows
	/// </summary>
	public const int ImGuiCol_PopupBg = 4;

	public const int ImGuiCol_Border = 5;

	public const int ImGuiCol_BorderShadow = 6;

	/// <summary>
	/// Background of checkbox, radio button, plot, slider, text input
	/// </summary>
	public const int ImGuiCol_FrameBg = 7;

	public const int ImGuiCol_FrameBgHovered = 8;

	public const int ImGuiCol_FrameBgActive = 9;

	/// <summary>
	/// Title bar
	/// </summary>
	public const int ImGuiCol_TitleBg = 10;

	/// <summary>
	/// Title bar when focused
	/// </summary>
	public const int ImGuiCol_TitleBgActive = 11;

	/// <summary>
	/// Title bar when collapsed
	/// </summary>
	public const int ImGuiCol_TitleBgCollapsed = 12;

	public const int ImGuiCol_MenuBarBg = 13;

	public const int ImGuiCol_ScrollbarBg = 14;

	public const int ImGuiCol_ScrollbarGrab = 15;

	public const int ImGuiCol_ScrollbarGrabHovered = 16;

	public const int ImGuiCol_ScrollbarGrabActive = 17;

	/// <summary>
	/// Checkbox tick and RadioButton circle
	/// </summary>
	public const int ImGuiCol_CheckMark = 18;

	public const int ImGuiCol_SliderGrab = 19;

	public const int ImGuiCol_SliderGrabActive = 20;

	public const int ImGuiCol_Button = 21;

	public const int ImGuiCol_ButtonHovered = 22;

	public const int ImGuiCol_ButtonActive = 23;

	/// <summary>
	/// Header* colors are used for CollapsingHeader, TreeNode, Selectable, MenuItem
	/// </summary>
	public const int ImGuiCol_Header = 24;

	public const int ImGuiCol_HeaderHovered = 25;

	public const int ImGuiCol_HeaderActive = 26;

	public const int ImGuiCol_Separator = 27;

	public const int ImGuiCol_SeparatorHovered = 28;

	public const int ImGuiCol_SeparatorActive = 29;

	/// <summary>
	/// Resize grip in lower-right and lower-left corners of windows.
	/// </summary>
	public const int ImGuiCol_ResizeGrip = 30;

	public const int ImGuiCol_ResizeGripHovered = 31;

	public const int ImGuiCol_ResizeGripActive = 32;

	/// <summary>
	/// TabItem in a TabBar
	/// </summary>
	public const int ImGuiCol_Tab = 33;

	public const int ImGuiCol_TabHovered = 34;

	public const int ImGuiCol_TabActive = 35;

	public const int ImGuiCol_TabUnfocused = 36;

	public const int ImGuiCol_TabUnfocusedActive = 37;

	public const int ImGuiCol_PlotLines = 38;

	public const int ImGuiCol_PlotLinesHovered = 39;

	public const int ImGuiCol_PlotHistogram = 40;

	public const int ImGuiCol_PlotHistogramHovered = 41;

	/// <summary>
	/// Table header background
	/// </summary>
	public const int ImGuiCol_TableHeaderBg = 42;

	/// <summary>
	/// Table outer and header borders (prefer using Alpha=1.0 here)
	/// </summary>
	public const int ImGuiCol_TableBorderStrong = 43;

	/// <summary>
	/// Table inner borders (prefer using Alpha=1.0 here)
	/// </summary>
	public const int ImGuiCol_TableBorderLight = 44;

	/// <summary>
	/// Table row background (even rows)
	/// </summary>
	public const int ImGuiCol_TableRowBg = 45;

	/// <summary>
	/// Table row background (odd rows)
	/// </summary>
	public const int ImGuiCol_TableRowBgAlt = 46;

	public const int ImGuiCol_TextSelectedBg = 47;

	/// <summary>
	/// Rectangle highlighting a drop target
	/// </summary>
	public const int ImGuiCol_DragDropTarget = 48;

	/// <summary>
	/// Gamepad/keyboard: current highlighted item
	/// </summary>
	public const int ImGuiCol_NavHighlight = 49;

	/// <summary>
	/// Highlight window when using CTRL+TAB
	/// </summary>
	public const int ImGuiCol_NavWindowingHighlight = 50;

	/// <summary>
	/// Darken/colorize entire screen behind the CTRL+TAB window list, when active
	/// </summary>
	public const int ImGuiCol_NavWindowingDimBg = 51;

	/// <summary>
	/// Darken/colorize entire screen behind a modal window, when one is active
	/// </summary>
	public const int ImGuiCol_ModalWindowDimBg = 52;

	public const int ImGuiCol_COUNT = 53;

	/// <summary>
	/// <para>Enum name --------------------- // Member in ImGuiStyle structure (see ImGuiStyle for descriptions)</para>
	/// </summary>
	/// <para/><summary>
	/// float     Alpha
	/// </summary>
	public const int ImGuiStyleVar_Alpha = 0;

	/// <summary>
	/// float     DisabledAlpha
	/// </summary>
	public const int ImGuiStyleVar_DisabledAlpha = 1;

	/// <summary>
	/// ImVec2    WindowPadding
	/// </summary>
	public const int ImGuiStyleVar_WindowPadding = 2;

	/// <summary>
	/// float     WindowRounding
	/// </summary>
	public const int ImGuiStyleVar_WindowRounding = 3;

	/// <summary>
	/// float     WindowBorderSize
	/// </summary>
	public const int ImGuiStyleVar_WindowBorderSize = 4;

	/// <summary>
	/// ImVec2    WindowMinSize
	/// </summary>
	public const int ImGuiStyleVar_WindowMinSize = 5;

	/// <summary>
	/// ImVec2    WindowTitleAlign
	/// </summary>
	public const int ImGuiStyleVar_WindowTitleAlign = 6;

	/// <summary>
	/// float     ChildRounding
	/// </summary>
	public const int ImGuiStyleVar_ChildRounding = 7;

	/// <summary>
	/// float     ChildBorderSize
	/// </summary>
	public const int ImGuiStyleVar_ChildBorderSize = 8;

	/// <summary>
	/// float     PopupRounding
	/// </summary>
	public const int ImGuiStyleVar_PopupRounding = 9;

	/// <summary>
	/// float     PopupBorderSize
	/// </summary>
	public const int ImGuiStyleVar_PopupBorderSize = 10;

	/// <summary>
	/// ImVec2    FramePadding
	/// </summary>
	public const int ImGuiStyleVar_FramePadding = 11;

	/// <summary>
	/// float     FrameRounding
	/// </summary>
	public const int ImGuiStyleVar_FrameRounding = 12;

	/// <summary>
	/// float     FrameBorderSize
	/// </summary>
	public const int ImGuiStyleVar_FrameBorderSize = 13;

	/// <summary>
	/// ImVec2    ItemSpacing
	/// </summary>
	public const int ImGuiStyleVar_ItemSpacing = 14;

	/// <summary>
	/// ImVec2    ItemInnerSpacing
	/// </summary>
	public const int ImGuiStyleVar_ItemInnerSpacing = 15;

	/// <summary>
	/// float     IndentSpacing
	/// </summary>
	public const int ImGuiStyleVar_IndentSpacing = 16;

	/// <summary>
	/// ImVec2    CellPadding
	/// </summary>
	public const int ImGuiStyleVar_CellPadding = 17;

	/// <summary>
	/// float     ScrollbarSize
	/// </summary>
	public const int ImGuiStyleVar_ScrollbarSize = 18;

	/// <summary>
	/// float     ScrollbarRounding
	/// </summary>
	public const int ImGuiStyleVar_ScrollbarRounding = 19;

	/// <summary>
	/// float     GrabMinSize
	/// </summary>
	public const int ImGuiStyleVar_GrabMinSize = 20;

	/// <summary>
	/// float     GrabRounding
	/// </summary>
	public const int ImGuiStyleVar_GrabRounding = 21;

	/// <summary>
	/// float     TabRounding
	/// </summary>
	public const int ImGuiStyleVar_TabRounding = 22;

	/// <summary>
	/// float     TabBarBorderSize
	/// </summary>
	public const int ImGuiStyleVar_TabBarBorderSize = 23;

	/// <summary>
	/// ImVec2    ButtonTextAlign
	/// </summary>
	public const int ImGuiStyleVar_ButtonTextAlign = 24;

	/// <summary>
	/// ImVec2    SelectableTextAlign
	/// </summary>
	public const int ImGuiStyleVar_SelectableTextAlign = 25;

	/// <summary>
	/// float  SeparatorTextBorderSize
	/// </summary>
	public const int ImGuiStyleVar_SeparatorTextBorderSize = 26;

	/// <summary>
	/// ImVec2    SeparatorTextAlign
	/// </summary>
	public const int ImGuiStyleVar_SeparatorTextAlign = 27;

	/// <summary>
	/// ImVec2    SeparatorTextPadding
	/// </summary>
	public const int ImGuiStyleVar_SeparatorTextPadding = 28;

	public const int ImGuiStyleVar_COUNT = 29;

	public const int ImGuiButtonFlags_None = 0;

	/// <summary>
	/// React on left mouse button (default)
	/// </summary>
	public const int ImGuiButtonFlags_MouseButtonLeft = 1;

	/// <summary>
	/// React on right mouse button
	/// </summary>
	public const int ImGuiButtonFlags_MouseButtonRight = 2;

	/// <summary>
	/// React on center mouse button
	/// </summary>
	public const int ImGuiButtonFlags_MouseButtonMiddle = 4;

	/// <summary>
	/// <para>[Internal]</para>
	/// </summary>
	public const int ImGuiButtonFlags_MouseButtonMask_ = 7;

	public const int ImGuiButtonFlags_MouseButtonDefault_ = 1;

	public const int ImGuiColorEditFlags_None = 0;

	/// <summary>
	///              // ColorEdit, ColorPicker, ColorButton: ignore Alpha component (will only read 3 components from the input pointer).
	/// </summary>
	public const int ImGuiColorEditFlags_NoAlpha = 2;

	/// <summary>
	///              // ColorEdit: disable picker when clicking on color square.
	/// </summary>
	public const int ImGuiColorEditFlags_NoPicker = 4;

	/// <summary>
	///              // ColorEdit: disable toggling options menu when right-clicking on inputs/small preview.
	/// </summary>
	public const int ImGuiColorEditFlags_NoOptions = 8;

	/// <summary>
	///              // ColorEdit, ColorPicker: disable color square preview next to the inputs. (e.g. to show only the inputs)
	/// </summary>
	public const int ImGuiColorEditFlags_NoSmallPreview = 16;

	/// <summary>
	///              // ColorEdit, ColorPicker: disable inputs sliders/text widgets (e.g. to show only the small preview color square).
	/// </summary>
	public const int ImGuiColorEditFlags_NoInputs = 32;

	/// <summary>
	///              // ColorEdit, ColorPicker, ColorButton: disable tooltip when hovering the preview.
	/// </summary>
	public const int ImGuiColorEditFlags_NoTooltip = 64;

	/// <summary>
	///              // ColorEdit, ColorPicker: disable display of inline text label (the label is still forwarded to the tooltip and picker).
	/// </summary>
	public const int ImGuiColorEditFlags_NoLabel = 128;

	/// <summary>
	///              // ColorPicker: disable bigger color preview on right side of the picker, use small color square preview instead.
	/// </summary>
	public const int ImGuiColorEditFlags_NoSidePreview = 256;

	/// <summary>
	///              // ColorEdit: disable drag and drop target. ColorButton: disable drag and drop source.
	/// </summary>
	public const int ImGuiColorEditFlags_NoDragDrop = 512;

	/// <summary>
	///              // ColorButton: disable border (which is enforced by default)
	/// </summary>
	public const int ImGuiColorEditFlags_NoBorder = 1024;

	/// <summary>
	/// <para>User Options (right-click on widget to change some of them).</para>
	/// </summary>
	/// <para/><summary>
	///              // ColorEdit, ColorPicker: show vertical alpha bar/gradient in picker.
	/// </summary>
	public const int ImGuiColorEditFlags_AlphaBar = 65536;

	/// <summary>
	///              // ColorEdit, ColorPicker, ColorButton: display preview as a transparent color over a checkerboard, instead of opaque.
	/// </summary>
	public const int ImGuiColorEditFlags_AlphaPreview = 131072;

	/// <summary>
	///              // ColorEdit, ColorPicker, ColorButton: display half opaque / half checkerboard, instead of opaque.
	/// </summary>
	public const int ImGuiColorEditFlags_AlphaPreviewHalf = 262144;

	/// <summary>
	///              // (WIP) ColorEdit: Currently only disable 0.0f..1.0f limits in RGBA edition (note: you probably want to use ImGuiColorEditFlags_Float flag as well).
	/// </summary>
	public const int ImGuiColorEditFlags_HDR = 524288;

	/// <summary>
	/// [Display]    // ColorEdit: override _display_ type among RGB/HSV/Hex. ColorPicker: select any combination using one or more of RGB/HSV/Hex.
	/// </summary>
	public const int ImGuiColorEditFlags_DisplayRGB = 1048576;

	/// <summary>
	/// [Display]    // "
	/// </summary>
	public const int ImGuiColorEditFlags_DisplayHSV = 2097152;

	/// <summary>
	/// [Display]    // "
	/// </summary>
	public const int ImGuiColorEditFlags_DisplayHex = 4194304;

	/// <summary>
	/// [DataType]   // ColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0..255.
	/// </summary>
	public const int ImGuiColorEditFlags_Uint8 = 8388608;

	/// <summary>
	/// [DataType]   // ColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0.0f..1.0f floats instead of 0..255 integers. No round-trip of value via integers.
	/// </summary>
	public const int ImGuiColorEditFlags_Float = 16777216;

	/// <summary>
	/// [Picker]     // ColorPicker: bar for Hue, rectangle for Sat/Value.
	/// </summary>
	public const int ImGuiColorEditFlags_PickerHueBar = 33554432;

	/// <summary>
	/// [Picker]     // ColorPicker: wheel for Hue, triangle for Sat/Value.
	/// </summary>
	public const int ImGuiColorEditFlags_PickerHueWheel = 67108864;

	/// <summary>
	/// [Input]      // ColorEdit, ColorPicker: input and output data in RGB format.
	/// </summary>
	public const int ImGuiColorEditFlags_InputRGB = 134217728;

	/// <summary>
	/// [Input]      // ColorEdit, ColorPicker: input and output data in HSV format.
	/// </summary>
	public const int ImGuiColorEditFlags_InputHSV = 268435456;

	/// <summary>
	/// <para>Defaults Options. You can set application defaults using SetColorEditOptions(). The intent is that you probably don't want to</para>
	/// <para>override them in most of your calls. Let the user choose via the option menu and/or call SetColorEditOptions() once during startup.</para>
	/// </summary>
	public const int ImGuiColorEditFlags_DefaultOptions_ = 177209344;

	/// <summary>
	/// <para>[Internal] Masks</para>
	/// </summary>
	public const int ImGuiColorEditFlags_DisplayMask_ = 7340032;

	public const int ImGuiColorEditFlags_DataTypeMask_ = 25165824;

	public const int ImGuiColorEditFlags_PickerMask_ = 100663296;

	public const int ImGuiColorEditFlags_InputMask_ = 402653184;

	public const int ImGuiSliderFlags_None = 0;

	/// <summary>
	/// Clamp value to min/max bounds when input manually with CTRL+Click. By default CTRL+Click allows going out of bounds.
	/// </summary>
	public const int ImGuiSliderFlags_AlwaysClamp = 16;

	/// <summary>
	/// Make the widget logarithmic (linear otherwise). Consider using ImGuiSliderFlags_NoRoundToFormat with this if using a format-string with small amount of digits.
	/// </summary>
	public const int ImGuiSliderFlags_Logarithmic = 32;

	/// <summary>
	/// Disable rounding underlying value to match precision of the display format string (e.g. %.3f values are rounded to those 3 digits)
	/// </summary>
	public const int ImGuiSliderFlags_NoRoundToFormat = 64;

	/// <summary>
	/// Disable CTRL+Click or Enter key allowing to input text directly into the widget
	/// </summary>
	public const int ImGuiSliderFlags_NoInput = 128;

	/// <summary>
	/// [Internal] We treat using those bits as being potentially a 'float power' argument from the previous API that has got miscast to this enum, and will trigger an assert if needed.
	/// </summary>
	public const int ImGuiSliderFlags_InvalidMask_ = 1879048207;

	public const int ImGuiMouseButton_Left = 0;

	public const int ImGuiMouseButton_Right = 1;

	public const int ImGuiMouseButton_Middle = 2;

	public const int ImGuiMouseButton_COUNT = 5;

	public const int ImGuiMouseCursor_None = -1;

	public const int ImGuiMouseCursor_Arrow = 0;

	/// <summary>
	/// When hovering over InputText, etc.
	/// </summary>
	public const int ImGuiMouseCursor_TextInput = 1;

	/// <summary>
	/// (Unused by Dear ImGui functions)
	/// </summary>
	public const int ImGuiMouseCursor_ResizeAll = 2;

	/// <summary>
	/// When hovering over a horizontal border
	/// </summary>
	public const int ImGuiMouseCursor_ResizeNS = 3;

	/// <summary>
	/// When hovering over a vertical border or a column
	/// </summary>
	public const int ImGuiMouseCursor_ResizeEW = 4;

	/// <summary>
	/// When hovering over the bottom-left corner of a window
	/// </summary>
	public const int ImGuiMouseCursor_ResizeNESW = 5;

	/// <summary>
	/// When hovering over the bottom-right corner of a window
	/// </summary>
	public const int ImGuiMouseCursor_ResizeNWSE = 6;

	/// <summary>
	/// (Unused by Dear ImGui functions. Use for e.g. hyperlinks)
	/// </summary>
	public const int ImGuiMouseCursor_Hand = 7;

	/// <summary>
	/// When hovering something with disallowed interaction. Usually a crossed circle.
	/// </summary>
	public const int ImGuiMouseCursor_NotAllowed = 8;

	public const int ImGuiMouseCursor_COUNT = 9;

	/// <summary>
	/// Input is coming from an actual mouse.
	/// </summary>
	public const int ImGuiMouseSource_Mouse = 0;

	/// <summary>
	/// Input is coming from a touch screen (no hovering prior to initial press, less precise initial press aiming, dual-axis wheeling possible).
	/// </summary>
	public const int ImGuiMouseSource_TouchScreen = 1;

	/// <summary>
	/// Input is coming from a pressure/magnetic pen (often used in conjunction with high-sampling rates).
	/// </summary>
	public const int ImGuiMouseSource_Pen = 2;

	public const int ImGuiMouseSource_COUNT = 3;

	/// <summary>
	/// No condition (always set the variable), same as _Always
	/// </summary>
	public const int ImGuiCond_None = 0;

	/// <summary>
	/// No condition (always set the variable), same as _None
	/// </summary>
	public const int ImGuiCond_Always = 1;

	/// <summary>
	/// Set the variable once per runtime session (only the first call will succeed)
	/// </summary>
	public const int ImGuiCond_Once = 2;

	/// <summary>
	/// Set the variable if the object/window has no persistently saved data (no entry in .ini file)
	/// </summary>
	public const int ImGuiCond_FirstUseEver = 4;

	/// <summary>
	/// Set the variable if the object/window is appearing after being hidden/inactive (or the first time)
	/// </summary>
	public const int ImGuiCond_Appearing = 8;

	/// <summary>
	/// <para>Features</para>
	/// </summary>
	public const int ImGuiTableFlags_None = 0;

	/// <summary>
	/// Enable resizing columns.
	/// </summary>
	public const int ImGuiTableFlags_Resizable = 1;

	/// <summary>
	/// Enable reordering columns in header row (need calling TableSetupColumn() + TableHeadersRow() to display headers)
	/// </summary>
	public const int ImGuiTableFlags_Reorderable = 2;

	/// <summary>
	/// Enable hiding/disabling columns in context menu.
	/// </summary>
	public const int ImGuiTableFlags_Hideable = 4;

	/// <summary>
	/// Enable sorting. Call TableGetSortSpecs() to obtain sort specs. Also see ImGuiTableFlags_SortMulti and ImGuiTableFlags_SortTristate.
	/// </summary>
	public const int ImGuiTableFlags_Sortable = 8;

	/// <summary>
	/// Disable persisting columns order, width and sort settings in the .ini file.
	/// </summary>
	public const int ImGuiTableFlags_NoSavedSettings = 16;

	/// <summary>
	/// Right-click on columns body/contents will display table context menu. By default it is available in TableHeadersRow().
	/// </summary>
	public const int ImGuiTableFlags_ContextMenuInBody = 32;

	/// <summary>
	/// <para>Decorations</para>
	/// </summary>
	/// <para/><summary>
	/// Set each RowBg color with ImGuiCol_TableRowBg or ImGuiCol_TableRowBgAlt (equivalent of calling TableSetBgColor with ImGuiTableBgFlags_RowBg0 on each row manually)
	/// </summary>
	public const int ImGuiTableFlags_RowBg = 64;

	/// <summary>
	/// Draw horizontal borders between rows.
	/// </summary>
	public const int ImGuiTableFlags_BordersInnerH = 128;

	/// <summary>
	/// Draw horizontal borders at the top and bottom.
	/// </summary>
	public const int ImGuiTableFlags_BordersOuterH = 256;

	/// <summary>
	/// Draw vertical borders between columns.
	/// </summary>
	public const int ImGuiTableFlags_BordersInnerV = 512;

	/// <summary>
	/// Draw vertical borders on the left and right sides.
	/// </summary>
	public const int ImGuiTableFlags_BordersOuterV = 1024;

	/// <summary>
	/// Draw horizontal borders.
	/// </summary>
	public const int ImGuiTableFlags_BordersH = 384;

	/// <summary>
	/// Draw vertical borders.
	/// </summary>
	public const int ImGuiTableFlags_BordersV = 1536;

	/// <summary>
	/// Draw inner borders.
	/// </summary>
	public const int ImGuiTableFlags_BordersInner = 640;

	/// <summary>
	/// Draw outer borders.
	/// </summary>
	public const int ImGuiTableFlags_BordersOuter = 1280;

	/// <summary>
	/// Draw all borders.
	/// </summary>
	public const int ImGuiTableFlags_Borders = 1920;

	/// <summary>
	/// [ALPHA] Disable vertical borders in columns Body (borders will always appear in Headers). -&gt; May move to style
	/// </summary>
	public const int ImGuiTableFlags_NoBordersInBody = 2048;

	/// <summary>
	/// [ALPHA] Disable vertical borders in columns Body until hovered for resize (borders will always appear in Headers). -&gt; May move to style
	/// </summary>
	public const int ImGuiTableFlags_NoBordersInBodyUntilResize = 4096;

	/// <summary>
	/// <para>Sizing Policy (read above for defaults)</para>
	/// </summary>
	/// <para/><summary>
	/// Columns default to _WidthFixed or _WidthAuto (if resizable or not resizable), matching contents width.
	/// </summary>
	public const int ImGuiTableFlags_SizingFixedFit = 8192;

	/// <summary>
	/// Columns default to _WidthFixed or _WidthAuto (if resizable or not resizable), matching the maximum contents width of all columns. Implicitly enable ImGuiTableFlags_NoKeepColumnsVisible.
	/// </summary>
	public const int ImGuiTableFlags_SizingFixedSame = 16384;

	/// <summary>
	/// Columns default to _WidthStretch with default weights proportional to each columns contents widths.
	/// </summary>
	public const int ImGuiTableFlags_SizingStretchProp = 24576;

	/// <summary>
	/// Columns default to _WidthStretch with default weights all equal, unless overridden by TableSetupColumn().
	/// </summary>
	public const int ImGuiTableFlags_SizingStretchSame = 32768;

	/// <summary>
	/// <para>Sizing Extra Options</para>
	/// </summary>
	/// <para/><summary>
	/// Make outer width auto-fit to columns, overriding outer_size.x value. Only available when ScrollX/ScrollY are disabled and Stretch columns are not used.
	/// </summary>
	public const int ImGuiTableFlags_NoHostExtendX = 65536;

	/// <summary>
	/// Make outer height stop exactly at outer_size.y (prevent auto-extending table past the limit). Only available when ScrollX/ScrollY are disabled. Data below the limit will be clipped and not visible.
	/// </summary>
	public const int ImGuiTableFlags_NoHostExtendY = 131072;

	/// <summary>
	/// Disable keeping column always minimally visible when ScrollX is off and table gets too small. Not recommended if columns are resizable.
	/// </summary>
	public const int ImGuiTableFlags_NoKeepColumnsVisible = 262144;

	/// <summary>
	/// Disable distributing remainder width to stretched columns (width allocation on a 100-wide table with 3 columns: Without this flag: 33,33,34. With this flag: 33,33,33). With larger number of columns, resizing will appear to be less smooth.
	/// </summary>
	public const int ImGuiTableFlags_PreciseWidths = 524288;

	/// <summary>
	/// <para>Clipping</para>
	/// </summary>
	/// <para/><summary>
	/// Disable clipping rectangle for every individual columns (reduce draw command count, items will be able to overflow into other columns). Generally incompatible with TableSetupScrollFreeze().
	/// </summary>
	public const int ImGuiTableFlags_NoClip = 1048576;

	/// <summary>
	/// <para>Padding</para>
	/// </summary>
	/// <para/><summary>
	/// Default if BordersOuterV is on. Enable outermost padding. Generally desirable if you have headers.
	/// </summary>
	public const int ImGuiTableFlags_PadOuterX = 2097152;

	/// <summary>
	/// Default if BordersOuterV is off. Disable outermost padding.
	/// </summary>
	public const int ImGuiTableFlags_NoPadOuterX = 4194304;

	/// <summary>
	/// Disable inner padding between columns (double inner padding if BordersOuterV is on, single inner padding if BordersOuterV is off).
	/// </summary>
	public const int ImGuiTableFlags_NoPadInnerX = 8388608;

	/// <summary>
	/// <para>Scrolling</para>
	/// </summary>
	/// <para/><summary>
	/// Enable horizontal scrolling. Require 'outer_size' parameter of BeginTable() to specify the container size. Changes default sizing policy. Because this creates a child window, ScrollY is currently generally recommended when using ScrollX.
	/// </summary>
	public const int ImGuiTableFlags_ScrollX = 16777216;

	/// <summary>
	/// Enable vertical scrolling. Require 'outer_size' parameter of BeginTable() to specify the container size.
	/// </summary>
	public const int ImGuiTableFlags_ScrollY = 33554432;

	/// <summary>
	/// <para>Sorting</para>
	/// </summary>
	/// <para/><summary>
	/// Hold shift when clicking headers to sort on multiple column. TableGetSortSpecs() may return specs where (SpecsCount &gt; 1).
	/// </summary>
	public const int ImGuiTableFlags_SortMulti = 67108864;

	/// <summary>
	/// Allow no sorting, disable default sorting. TableGetSortSpecs() may return specs where (SpecsCount == 0).
	/// </summary>
	public const int ImGuiTableFlags_SortTristate = 134217728;

	/// <summary>
	/// <para>Miscellaneous</para>
	/// </summary>
	/// <para/><summary>
	/// Highlight column headers when hovered (may evolve into a fuller highlight)
	/// </summary>
	public const int ImGuiTableFlags_HighlightHoveredColumn = 268435456;

	/// <summary>
	/// <para>[Internal] Combinations and masks</para>
	/// </summary>
	public const int ImGuiTableFlags_SizingMask_ = 57344;

	/// <summary>
	/// <para>Input configuration flags</para>
	/// </summary>
	public const int ImGuiTableColumnFlags_None = 0;

	/// <summary>
	/// Overriding/master disable flag: hide column, won't show in context menu (unlike calling TableSetColumnEnabled() which manipulates the user accessible state)
	/// </summary>
	public const int ImGuiTableColumnFlags_Disabled = 1;

	/// <summary>
	/// Default as a hidden/disabled column.
	/// </summary>
	public const int ImGuiTableColumnFlags_DefaultHide = 2;

	/// <summary>
	/// Default as a sorting column.
	/// </summary>
	public const int ImGuiTableColumnFlags_DefaultSort = 4;

	/// <summary>
	/// Column will stretch. Preferable with horizontal scrolling disabled (default if table sizing policy is _SizingStretchSame or _SizingStretchProp).
	/// </summary>
	public const int ImGuiTableColumnFlags_WidthStretch = 8;

	/// <summary>
	/// Column will not stretch. Preferable with horizontal scrolling enabled (default if table sizing policy is _SizingFixedFit and table is resizable).
	/// </summary>
	public const int ImGuiTableColumnFlags_WidthFixed = 16;

	/// <summary>
	/// Disable manual resizing.
	/// </summary>
	public const int ImGuiTableColumnFlags_NoResize = 32;

	/// <summary>
	/// Disable manual reordering this column, this will also prevent other columns from crossing over this column.
	/// </summary>
	public const int ImGuiTableColumnFlags_NoReorder = 64;

	/// <summary>
	/// Disable ability to hide/disable this column.
	/// </summary>
	public const int ImGuiTableColumnFlags_NoHide = 128;

	/// <summary>
	/// Disable clipping for this column (all NoClip columns will render in a same draw command).
	/// </summary>
	public const int ImGuiTableColumnFlags_NoClip = 256;

	/// <summary>
	/// Disable ability to sort on this field (even if ImGuiTableFlags_Sortable is set on the table).
	/// </summary>
	public const int ImGuiTableColumnFlags_NoSort = 512;

	/// <summary>
	/// Disable ability to sort in the ascending direction.
	/// </summary>
	public const int ImGuiTableColumnFlags_NoSortAscending = 1024;

	/// <summary>
	/// Disable ability to sort in the descending direction.
	/// </summary>
	public const int ImGuiTableColumnFlags_NoSortDescending = 2048;

	/// <summary>
	/// TableHeadersRow() will not submit horizontal label for this column. Convenient for some small columns. Name will still appear in context menu or in angled headers.
	/// </summary>
	public const int ImGuiTableColumnFlags_NoHeaderLabel = 4096;

	/// <summary>
	/// Disable header text width contribution to automatic column width.
	/// </summary>
	public const int ImGuiTableColumnFlags_NoHeaderWidth = 8192;

	/// <summary>
	/// Make the initial sort direction Ascending when first sorting on this column (default).
	/// </summary>
	public const int ImGuiTableColumnFlags_PreferSortAscending = 16384;

	/// <summary>
	/// Make the initial sort direction Descending when first sorting on this column.
	/// </summary>
	public const int ImGuiTableColumnFlags_PreferSortDescending = 32768;

	/// <summary>
	/// Use current Indent value when entering cell (default for column 0).
	/// </summary>
	public const int ImGuiTableColumnFlags_IndentEnable = 65536;

	/// <summary>
	/// Ignore current Indent value when entering cell (default for columns &gt; 0). Indentation changes _within_ the cell will still be honored.
	/// </summary>
	public const int ImGuiTableColumnFlags_IndentDisable = 131072;

	/// <summary>
	/// TableHeadersRow() will submit an angled header row for this column. Note this will add an extra row.
	/// </summary>
	public const int ImGuiTableColumnFlags_AngledHeader = 262144;

	/// <summary>
	/// <para>Output status flags, read-only via TableGetColumnFlags()</para>
	/// </summary>
	/// <para/><summary>
	/// Status: is enabled == not hidden by user/api (referred to as "Hide" in _DefaultHide and _NoHide) flags.
	/// </summary>
	public const int ImGuiTableColumnFlags_IsEnabled = 16777216;

	/// <summary>
	/// Status: is visible == is enabled AND not clipped by scrolling.
	/// </summary>
	public const int ImGuiTableColumnFlags_IsVisible = 33554432;

	/// <summary>
	/// Status: is currently part of the sort specs
	/// </summary>
	public const int ImGuiTableColumnFlags_IsSorted = 67108864;

	/// <summary>
	/// Status: is hovered by mouse
	/// </summary>
	public const int ImGuiTableColumnFlags_IsHovered = 134217728;

	/// <summary>
	/// <para>[Internal] Combinations and masks</para>
	/// </summary>
	public const int ImGuiTableColumnFlags_WidthMask_ = 24;

	public const int ImGuiTableColumnFlags_IndentMask_ = 196608;

	public const int ImGuiTableColumnFlags_StatusMask_ = 251658240;

	/// <summary>
	/// [Internal] Disable user resizing this column directly (it may however we resized indirectly from its left edge)
	/// </summary>
	public const int ImGuiTableColumnFlags_NoDirectResize_ = 1073741824;

	public const int ImGuiTableRowFlags_None = 0;

	/// <summary>
	/// Identify header row (set default background color + width of its contents accounted differently for auto column width)
	/// </summary>
	public const int ImGuiTableRowFlags_Headers = 1;

	public const int ImGuiTableBgTarget_None = 0;

	/// <summary>
	/// Set row background color 0 (generally used for background, automatically set when ImGuiTableFlags_RowBg is used)
	/// </summary>
	public const int ImGuiTableBgTarget_RowBg0 = 1;

	/// <summary>
	/// Set row background color 1 (generally used for selection marking)
	/// </summary>
	public const int ImGuiTableBgTarget_RowBg1 = 2;

	/// <summary>
	/// Set cell background color (top-most color)
	/// </summary>
	public const int ImGuiTableBgTarget_CellBg = 3;

	public const int ImDrawFlags_None = 0;

	/// <summary>
	/// PathStroke(), AddPolyline(): specify that shape should be closed (Important: this is always == 1 for legacy reason)
	/// </summary>
	public const int ImDrawFlags_Closed = 1;

	/// <summary>
	/// AddRect(), AddRectFilled(), PathRect(): enable rounding top-left corner only (when rounding &gt; 0.0f, we default to all corners). Was 0x01.
	/// </summary>
	public const int ImDrawFlags_RoundCornersTopLeft = 16;

	/// <summary>
	/// AddRect(), AddRectFilled(), PathRect(): enable rounding top-right corner only (when rounding &gt; 0.0f, we default to all corners). Was 0x02.
	/// </summary>
	public const int ImDrawFlags_RoundCornersTopRight = 32;

	/// <summary>
	/// AddRect(), AddRectFilled(), PathRect(): enable rounding bottom-left corner only (when rounding &gt; 0.0f, we default to all corners). Was 0x04.
	/// </summary>
	public const int ImDrawFlags_RoundCornersBottomLeft = 64;

	/// <summary>
	/// AddRect(), AddRectFilled(), PathRect(): enable rounding bottom-right corner only (when rounding &gt; 0.0f, we default to all corners). Wax 0x08.
	/// </summary>
	public const int ImDrawFlags_RoundCornersBottomRight = 128;

	/// <summary>
	/// AddRect(), AddRectFilled(), PathRect(): disable rounding on all corners (when rounding &gt; 0.0f). This is NOT zero, NOT an implicit flag!
	/// </summary>
	public const int ImDrawFlags_RoundCornersNone = 256;

	public const int ImDrawFlags_RoundCornersTop = 48;

	public const int ImDrawFlags_RoundCornersBottom = 192;

	public const int ImDrawFlags_RoundCornersLeft = 80;

	public const int ImDrawFlags_RoundCornersRight = 160;

	public const int ImDrawFlags_RoundCornersAll = 240;

	/// <summary>
	/// Default to ALL corners if none of the _RoundCornersXX flags are specified.
	/// </summary>
	public const int ImDrawFlags_RoundCornersDefault_ = 240;

	public const int ImDrawFlags_RoundCornersMask_ = 496;

	public const int ImDrawListFlags_None = 0;

	/// <summary>
	/// Enable anti-aliased lines/borders (*2 the number of triangles for 1.0f wide line or lines thin enough to be drawn using textures, otherwise *3 the number of triangles)
	/// </summary>
	public const int ImDrawListFlags_AntiAliasedLines = 1;

	/// <summary>
	/// Enable anti-aliased lines/borders using textures when possible. Require backend to render with bilinear filtering (NOT point/nearest filtering).
	/// </summary>
	public const int ImDrawListFlags_AntiAliasedLinesUseTex = 2;

	/// <summary>
	/// Enable anti-aliased edge around filled shapes (rounded rectangles, circles).
	/// </summary>
	public const int ImDrawListFlags_AntiAliasedFill = 4;

	/// <summary>
	/// Can emit 'VtxOffset &gt; 0' to allow large meshes. Set when 'ImGuiBackendFlags_RendererHasVtxOffset' is enabled.
	/// </summary>
	public const int ImDrawListFlags_AllowVtxOffset = 8;

	public const int ImFontAtlasFlags_None = 0;

	/// <summary>
	/// Don't round the height to next power of two
	/// </summary>
	public const int ImFontAtlasFlags_NoPowerOfTwoHeight = 1;

	/// <summary>
	/// Don't build software mouse cursors into the atlas (save a little texture memory)
	/// </summary>
	public const int ImFontAtlasFlags_NoMouseCursors = 2;

	/// <summary>
	/// Don't build thick line textures into the atlas (save a little texture memory, allow support for point/nearest filtering). The AntiAliasedLinesUseTex features uses them, otherwise they will be rendered using polygons (more expensive for CPU/GPU).
	/// </summary>
	public const int ImFontAtlasFlags_NoBakedLines = 4;

	public const int ImGuiViewportFlags_None = 0;

	/// <summary>
	/// Represent a Platform Window
	/// </summary>
	public const int ImGuiViewportFlags_IsPlatformWindow = 1;

	/// <summary>
	/// Represent a Platform Monitor (unused yet)
	/// </summary>
	public const int ImGuiViewportFlags_IsPlatformMonitor = 2;

	/// <summary>
	/// Platform Window: is created/managed by the application (rather than a dear imgui backend)
	/// </summary>
	public const int ImGuiViewportFlags_OwnedByApp = 4;

}
